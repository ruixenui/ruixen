{
  "name": "btn-07",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { useState, useEffect } from \"react\";\nimport { Download, Check, X } from \"lucide-react\";\n\ninterface Btn07Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n    onProcess?: () => Promise<boolean>;\n    processDuration?: number;\n}\n\nexport default function Btn07({\n    className,\n    onProcess = async () => {\n        await new Promise((resolve) => setTimeout(resolve, 2000));\n        return Math.random() > 0.5;\n    },\n    processDuration = 2000,\n    ...props\n}: Btn07Props) {\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [isSuccess, setIsSuccess] = useState<boolean | null>(null);\n    const [isScaling, setIsScaling] = useState(false);\n    const [progress, setProgress] = useState(0);\n\n    useEffect(() => {\n        if (isProcessing) {\n            const startTime = Date.now();\n            const interval = setInterval(() => {\n                const elapsed = Date.now() - startTime;\n                const newProgress = (elapsed / processDuration) * 100;\n\n                if (newProgress >= 100) {\n                    clearInterval(interval);\n                    setProgress(100);\n                } else {\n                    setProgress(newProgress);\n                }\n            }, 10);\n\n            return () => clearInterval(interval);\n        }\n    }, [isProcessing, processDuration]);\n\n    async function handleClick() {\n        if (isProcessing) return;\n\n        setIsProcessing(true);\n        setIsSuccess(null);\n        setProgress(0);\n\n        await new Promise((resolve) => setTimeout(resolve, processDuration));\n        const success = onProcess ? await onProcess() : true;\n\n        setIsSuccess(success);\n        setIsProcessing(false);\n        setIsScaling(true);\n\n        setTimeout(() => {\n            setIsSuccess(null);\n            setProgress(0);\n            setIsScaling(false);\n        }, 2000);\n    }\n\n    return (\n        <Button\n            className={cn(\n                \"min-w-40 relative group\",\n                \"bg-blue-50 dark:bg-blue-950\",\n                \"hover:bg-blue-100 dark:hover:bg-blue-900\",\n                \"text-blue-600 dark:text-blue-300\",\n                \"border border-blue-200 dark:border-blue-800\",\n                \"transition-all duration-300\",\n                isProcessing && \"cursor-wait\",\n                className\n            )}\n            onClick={handleClick}\n            disabled={isProcessing}\n            {...props}\n        >\n            <div\n                className={cn(\n                    \"w-full flex items-center justify-center gap-2\",\n                    isScaling && \"animate-[scale_300ms_ease-in-out]\"\n                )}\n            >\n                {isSuccess === null ? (\n                    <>\n                        <Download\n                            className={cn(\n                                \"w-4 h-4 transition-transform duration-200\",\n                                \"group-hover:scale-110\",\n                                isProcessing && \"animate-bounce\"\n                            )}\n                        />\n                        <span>\n                            {isProcessing ? \"Processing...\" : \"Download\"}\n                        </span>\n                    </>\n                ) : isSuccess ? (\n                    <>\n                        <Check className=\"w-4 h-4 text-green-500\" />\n                        <span className=\"text-green-500\">Complete!</span>\n                    </>\n                ) : (\n                    <>\n                        <X className=\"w-4 h-4 text-red-500\" />\n                        <span className=\"text-red-500\">Failed</span>\n                    </>\n                )}\n            </div>\n        </Button>\n    );\n}\n",
      "path": "/components/ruixenui/button/btn-07.tsx",
      "target": "/components/ruixenui/btn-07.tsx"
    }
  ]
}