{
  "name": "input-01",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState, useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { X, Check } from \"lucide-react\";\n\ninterface SimpleInputProps {\n    label?: string;\n    placeholder?: string;\n    error?: string;\n    success?: string;\n    onChange?: (value: string) => void;\n    onClear?: () => void;\n    type?: \"text\" | \"email\" | \"password\" | \"search\";\n}\n\nexport default function Input_01({\n    label = \"Label\",\n    placeholder = \"Type something...\",\n    error,\n    success,\n    onChange,\n    onClear,\n    type = \"text\",\n}: SimpleInputProps) {\n    const [value, setValue] = useState(\"\");\n    const [isFocused, setIsFocused] = useState(false);\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const handleClear = () => {\n        setValue(\"\");\n        onClear?.();\n        inputRef.current?.focus();\n    };\n\n    return (\n        <div className=\"w-full max-w-xs space-y-1.5\">\n            <label\n                className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\"\n                htmlFor={label}\n            >\n                {label}\n            </label>\n\n            <div className=\"relative group\">\n                <input\n                    ref={inputRef}\n                    type={type}\n                    value={value}\n                    onChange={(e) => {\n                        setValue(e.target.value);\n                        onChange?.(e.target.value);\n                    }}\n                    onFocus={() => setIsFocused(true)}\n                    onBlur={() => setIsFocused(false)}\n                    placeholder={placeholder}\n                    className={cn(\n                        \"w-full px-3 py-2\",\n                        \"rounded-lg\",\n                        \"bg-white dark:bg-zinc-900\",\n                        \"border border-zinc-200 dark:border-zinc-800\",\n                        \"text-sm text-zinc-900 dark:text-zinc-100\",\n                        \"placeholder:text-zinc-400 dark:placeholder:text-zinc-600\",\n                        \"transition-all duration-200\",\n                        \"focus:outline-hidden focus:ring-2\",\n                        error\n                            ? \"border-red-500 focus:ring-red-500/20\"\n                            : success\n                            ? \"border-green-500 focus:ring-green-500/20\"\n                            : \"focus:ring-indigo-500/20\",\n                        isFocused && \"border-indigo-500\"\n                    )}\n                />\n\n                {/* Clear button */}\n                {value && (\n                    <button\n                        onClick={handleClear}\n                        className={cn(\n                            \"absolute right-2 top-1/2 -translate-y-1/2\",\n                            \"p-1 rounded-md\",\n                            \"text-zinc-400 hover:text-zinc-600\",\n                            \"dark:text-zinc-600 dark:hover:text-zinc-400\",\n                            \"transition-colors\"\n                        )}\n                    >\n                        <X className=\"w-4 h-4\" />\n                    </button>\n                )}\n\n                {/* Status indicator */}\n                <div\n                    className={cn(\n                        \"absolute -right-4 top-1/2 -translate-y-1/2\",\n                        \"transition-opacity duration-200\",\n                        !error && !success && \"opacity-0\"\n                    )}\n                >\n                    {error ? (\n                        <X className=\"w-4 h-4 text-red-500\" />\n                    ) : success ? (\n                        <Check className=\"w-4 h-4 text-green-500\" />\n                    ) : null}\n                </div>\n            </div>\n\n            {/* Error/Success message */}\n            {(error || success) && (\n                <p\n                    className={cn(\n                        \"text-sm\",\n                        error ? \"text-red-500\" : \"text-green-500\"\n                    )}\n                >\n                    {error || success}\n                </p>\n            )}\n        </div>\n    );\n}\n",
      "path": "/components/ruixenui/input/input-01.tsx",
      "target": "/components/ruixenui/input-01.tsx"
    }
  ]
}