{
  "name": "pricing-03",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, ArrowRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Feature {\n    name: string;\n    included: \"starter\" | \"pro\" | \"all\" | null;\n}\n\nconst features: Feature[] = [\n    { name: \"Basic Analytics\", included: \"starter\" },\n    { name: \"Up to 5 team members\", included: \"starter\" },\n    { name: \"Basic support\", included: \"starter\" },\n    { name: \"Advanced Analytics\", included: \"pro\" },\n    { name: \"Up to 20 team members\", included: \"pro\" },\n    { name: \"Priority support\", included: \"pro\" },\n    { name: \"Custom integrations\", included: \"all\" },\n    { name: \"Unlimited team members\", included: \"all\" },\n    { name: \"24/7 phone support\", included: \"all\" },\n];\n\nconst plans = [\n    {\n        name: \"Starter\",\n        price: { monthly: 15, yearly: 144 },\n        level: \"starter\" as const,\n    },\n    {\n        name: \"Pro\",\n        price: { monthly: 49, yearly: 470 },\n        level: \"pro\" as const,\n    },\n    {\n        name: \"Enterprise\",\n        price: { monthly: 99, yearly: 990 },\n        level: \"all\" as const,\n    },\n];\n\nexport default function Pricing_03() {\n    const [isYearly, setIsYearly] = useState(false);\n    const [selectedPlan, setSelectedPlan] = useState<string>(\"pro\");\n\n    return (\n        <div className=\"w-full max-w-3xl mx-auto px-4\">\n            <div className=\"flex justify-end mb-4 sm:mb-8\">\n                <div className=\"inline-flex items-center gap-2 text-xs sm:text-sm\">\n                    <button\n                        type=\"button\"\n                        onClick={() => setIsYearly(false)}\n                        className={cn(\n                            \"px-3 py-1 rounded-md transition-colors\",\n                            !isYearly\n                                ? \"bg-zinc-100 dark:bg-zinc-800\"\n                                : \"text-zinc-500\"\n                        )}\n                    >\n                        Monthly\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={() => setIsYearly(true)}\n                        className={cn(\n                            \"px-3 py-1 rounded-md transition-colors\",\n                            isYearly\n                                ? \"bg-zinc-100 dark:bg-zinc-800\"\n                                : \"text-zinc-500\"\n                        )}\n                    >\n                        Yearly\n                    </button>\n                </div>\n            </div>\n            <div className=\"flex flex-col sm:flex-row gap-4 mb-8\">\n                {plans.map((plan) => (\n                    <button\n                        key={plan.name}\n                        type=\"button\"\n                        onClick={() => setSelectedPlan(plan.level)}\n                        className={cn(\n                            \"flex-1 p-4 rounded-xl text-left transition-all\",\n                            \"border border-zinc-200 dark:border-zinc-800\",\n                            selectedPlan === plan.level &&\n                                \"ring-2 ring-blue-500 dark:ring-blue-400\"\n                        )}\n                    >\n                        <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"text-sm font-medium\">\n                                {plan.name}\n                            </span>\n                            {plan.level === \"pro\" && (\n                                <span className=\"text-xs bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-300 px-2 py-0.5 rounded-full\">\n                                    Popular\n                                </span>\n                            )}\n                        </div>\n                        <div className=\"text-2xl font-bold\">\n                            ${isYearly ? plan.price.yearly : plan.price.monthly}\n                            <span className=\"text-sm font-normal text-zinc-500\">\n                                /{isYearly ? \"year\" : \"month\"}\n                            </span>\n                        </div>\n                    </button>\n                ))}\n            </div>\n            <div className=\"border border-zinc-200 dark:border-zinc-800 rounded-xl overflow-hidden\">\n                <div className=\"overflow-x-auto\">\n                    <div className=\"min-w-[640px] divide-y divide-zinc-200 dark:divide-zinc-800\">\n                        <div className=\"flex items-center p-4 bg-zinc-50 dark:bg-zinc-900\">\n                            <div className=\"flex-1 text-sm font-medium\">Features</div>\n                            <div className=\"flex items-center gap-8 text-sm\">\n                                {plans.map((plan) => (\n                                    <div\n                                        key={plan.level}\n                                        className=\"w-16 text-center font-medium\"\n                                    >\n                                        {plan.name}\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                        {features.map((feature) => (\n                            <div\n                                key={feature.name}\n                                className={cn(\n                                    \"flex items-center p-4 transition-colors\",\n                                    feature.included === selectedPlan &&\n                                        \"bg-blue-50/50 dark:bg-blue-900/20\"\n                                )}\n                            >\n                                <div className=\"flex-1 text-sm\">{feature.name}</div>\n                                <div className=\"flex items-center gap-8 text-sm\">\n                                    {plans.map((plan) => (\n                                        <div\n                                            key={plan.level}\n                                            className={cn(\n                                                \"w-16 flex justify-center\",\n                                                plan.level === selectedPlan &&\n                                                    \"font-medium\"\n                                            )}\n                                        >\n                                            {shouldShowCheck(\n                                                feature.included,\n                                                plan.level\n                                            ) ? (\n                                                <Check className=\"w-5 h-5 text-blue-500\" />\n                                            ) : (\n                                                <span className=\"text-zinc-300 dark:text-zinc-700\">\n                                                    -\n                                                </span>\n                                            )}\n                                        </div>\n                                    ))}\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </div>\n            <div className=\"mt-8 text-center\">\n                <Button className=\"w-full sm:w-auto bg-blue-500 hover:bg-blue-600 text-white px-8 py-2 rounded-xl\">\n                    Get started with{\" \"}\n                    {plans.find((p) => p.level === selectedPlan)?.name}\n                    <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n            </div>\n        </div>\n    );\n}\n\nfunction shouldShowCheck(\n    included: Feature[\"included\"],\n    level: string\n): boolean {\n    if (included === \"all\") return true;\n    if (included === \"pro\" && (level === \"pro\" || level === \"all\")) return true;\n    if (\n        included === \"starter\" &&\n        (level === \"starter\" || level === \"pro\" || level === \"all\")\n    )\n        return true;\n    return false;\n}\n",
      "path": "/components/ruixenui/pricing/pricing-03.tsx",
      "target": "/components/ruixenui/pricing-03.tsx"
    }
  ]
}