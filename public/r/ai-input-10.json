{
  "name": "ai-input-10",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport {\n    Plus,\n    File,\n    Camera,\n    X,\n    ArrowRight,\n    Brain,\n    ChevronDown,\n    Lock,\n    Unlock,\n} from \"lucide-react\";\nimport { useState, useRef, useCallback, type RefObject } from \"react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\nimport { useFileInput } from \"@/hooks/use-file-input\";\nimport { useClickOutside } from \"@/hooks/use-click-outside\";\n\nconst AI_MODELS = [\n    { name: \"GPT-4\", description: \"The popular kid\" },\n    { name: \"GPT-3.5\", description: \"Time flies, he is old now...\" },\n    { name: \"Claude\", description: \"Yes, the best for coding\" },\n].map((model) => ({ ...model, icon: <Brain className=\"w-4 h-4\" /> }));\n\nconst FileDisplay = ({\n    fileName,\n    onClear,\n}: {\n    fileName: string;\n    onClear: () => void;\n}) => (\n    <div className=\"flex items-center gap-2 bg-black/5 dark:bg-white/5 w-fit px-3 py-1 rounded-lg\">\n        <File className=\"w-4 h-4 dark:text-white\" />\n        <span className=\"text-sm dark:text-white\">{fileName}</span>\n        <button\n            type=\"button\"\n            onClick={onClear}\n            className=\"ml-1 p-0.5 rounded-full hover:bg-black/10 dark:hover:bg-white/10\"\n        >\n            <X className=\"w-3 h-3 dark:text-white\" />\n        </button>\n    </div>\n);\n\nexport default function AIInput_10() {\n    const menuRef = useRef<HTMLDivElement>(null);\n\n    const [state, setState] = useState({\n        value: \"\",\n        fileName: \"\",\n        isPrivacyMode: false,\n        selectedModel: \"GPT-4\",\n        isMenuOpen: false,\n        isModelMenuOpen: false,\n    });\n\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n        minHeight: 40,\n        maxHeight: 200,\n    });\n    const { fileName, fileInputRef, handleFileSelect, clearFile } =\n        useFileInput({ accept: \"image/*\", maxSize: 5 });\n\n\n    const updateState = useCallback(\n        (updates: Partial<typeof state>) =>\n            setState((prev) => ({ ...prev, ...updates })),\n        []\n    );\n\n    useClickOutside(menuRef as RefObject<HTMLElement>   , () => {\n        if (state.isMenuOpen) updateState({ isMenuOpen: false });\n        if (state.isModelMenuOpen) updateState({ isModelMenuOpen: false });\n    });\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            updateState({ value: \"\" });\n            adjustHeight(true);\n        }\n    };\n\n    return (\n        <div className=\"w-full py-4\">\n            <div className=\"rounded-xl bg-black/5 dark:bg-white/5\">\n                <div ref={menuRef}>\n                    <div className=\"border-b border-black/10 dark:border-white/10\">\n                        <div className=\"flex justify-between items-center px-4 py-2 text-sm text-zinc-600 dark:text-zinc-400\">\n                            <div className=\"relative\" data-model-menu>\n                                <button\n                                    type=\"button\"\n                                    onClick={() =>\n                                        updateState({\n                                            isModelMenuOpen:\n                                                !state.isModelMenuOpen,\n                                        })\n                                    }\n                                    className=\"flex items-center gap-1.5 hover:bg-black/5 dark:hover:bg-white/5 rounded-lg px-2 py-1\"\n                                >\n                                    <Brain className=\"w-4 h-4 dark:text-white\" />\n                                    <span className=\"dark:text-white\">\n                                        {state.selectedModel}\n                                    </span>\n                                    <ChevronDown className=\"w-3 h-3 ml-0.5 dark:text-white\" />\n                                </button>\n\n                                {state.isModelMenuOpen && (\n                                    <div className=\"absolute top-full left-0 mt-1 w-64 bg-white dark:bg-zinc-800 rounded-md shadow-lg py-1 z-50 border border-black/10 dark:border-white/10\">\n                                        {AI_MODELS.map((model) => (\n                                            <button\n                                                type=\"button\"\n                                                key={model.name}\n                                                className=\"w-full px-3 py-1.5 text-left hover:bg-black/5 dark:hover:bg-white/5 flex items-center gap-2 text-sm transition-colors dark:text-white\"\n                                                onClick={() =>\n                                                    updateState({\n                                                        selectedModel:\n                                                            model.name,\n                                                        isModelMenuOpen: false,\n                                                    })\n                                                }\n                                            >\n                                                <div className=\"flex items-center gap-2 flex-1\">\n                                                    {model.icon}\n                                                    <span>{model.name}</span>\n                                                </div>\n                                                <span className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n                                                    {model.description}\n                                                </span>\n                                            </button>\n                                        ))}\n                                    </div>\n                                )}\n                            </div>\n\n                            <button\n                                type=\"button\"\n                                onClick={() =>\n                                    updateState({\n                                        isPrivacyMode: !state.isPrivacyMode,\n                                    })\n                                }\n                                className={cn(\n                                    \"flex items-center gap-2 p-1.5 rounded-lg hover:bg-black/5 dark:hover:bg-white/5\",\n                                    state.isPrivacyMode\n                                        ? \"text-green-600\"\n                                        : \"text-zinc-600 dark:text-zinc-400\"\n                                )}\n                            >\n                                {state.isPrivacyMode ? (\n                                    <Lock className=\"w-4 h-4\" />\n                                ) : (\n                                    <Unlock className=\"w-4 h-4\" />\n                                )}\n                                <span>Privacy</span>\n                            </button>\n                        </div>\n                    </div>\n\n                    {state.fileName && (\n                        <div className=\"px-4 pt-2\">\n                            <FileDisplay\n                                fileName={state.fileName}\n                                onClear={() => {\n                                    updateState({ fileName: \"\" });\n                                    if (fileInputRef.current)\n                                        fileInputRef.current.value = \"\";\n                                }}\n                            />\n                        </div>\n                    )}\n\n                    <div className=\"relative px-2 py-2\">\n                        <div\n                            className=\"absolute left-3 top-1/2 -translate-y-1/2\"\n                            data-action-menu\n                        >\n                            <button\n                                type=\"button\"\n                                onClick={() =>\n                                    updateState({\n                                        isMenuOpen: !state.isMenuOpen,\n                                    })\n                                }\n                                className=\"rounded-3xl bg-black/5 dark:bg-white/5 p-2 hover:bg-black/10 dark:hover:bg-white/10\"\n                            >\n                                <Plus className=\"w-4 h-4 dark:text-white\" />\n                            </button>\n\n                            {state.isMenuOpen && (\n                                <div className=\"absolute left-0 top-full mt-1 bg-white dark:bg-zinc-800 rounded-md shadow-lg py-1 min-w-[140px] z-50 border border-black/10 dark:border-white/10\">\n                                    {[\n                                        {\n                                            icon: File,\n                                            label: \"Upload File\",\n                                            onClick: () =>\n                                                fileInputRef.current?.click(),\n                                        },\n                                        { icon: Camera, label: \"Take Photo\" },\n                                    ].map(({ icon: Icon, label, onClick }) => (\n                                        <button\n                                            type=\"button\"\n                                            key={label}\n                                            onClick={onClick}\n                                            className=\"w-full px-3 py-1.5 flex items-center gap-2 hover:bg-black/5 dark:hover:bg-white/5 text-sm transition-colors dark:text-white\"\n                                        >\n                                            <Icon className=\"w-4 h-4 dark:text-white\" />\n                                            <span>{label}</span>\n                                        </button>\n                                    ))}\n                                </div>\n                            )}\n                        </div>\n\n                        <Textarea\n                            id=\"ai-input-10\"\n                            ref={textareaRef}\n                            value={state.value}\n                            placeholder=\"Type your message...\"\n                            className={cn(\n                                \"w-full rounded-xl pl-14 pr-10 border-none resize-none bg-transparent dark:text-white placeholder:text-black/70 dark:placeholder:text-white/70\",\n                                \"min-h-[40px]\"\n                            )}\n                            onKeyDown={handleKeyDown}\n                            onChange={(e) => {\n                                updateState({ value: e.target.value });\n                                adjustHeight();\n                            }}\n                        />\n\n                        <button\n                            type=\"button\"\n                            className=\"absolute right-3 top-1/2 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 p-1\"\n                        >\n                            <ArrowRight\n                                className={cn(\n                                    \"w-4 h-4 dark:text-white\",\n                                    state.value ? \"opacity-100\" : \"opacity-30\"\n                                )}\n                            />\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n",
      "path": "/components/ruixenui/ai-input/ai-input-10.tsx",
      "target": "/components/ruixenui/ai-input-10.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, useRef, useCallback } from \"react\";\n\ninterface UseAutoResizeTextareaProps {\n    minHeight: number;\n    maxHeight?: number;\n}\n\nexport function useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n}: UseAutoResizeTextareaProps) {\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const adjustHeight = useCallback(\n        (reset?: boolean) => {\n            const textarea = textareaRef.current;\n            if (!textarea) return;\n\n            if (reset) {\n                textarea.style.height = `${minHeight}px`;\n                return;\n            }\n\n            // Temporarily shrink to get the right scrollHeight\n            textarea.style.height = `${minHeight}px`;\n\n            // Calculate new height\n            const newHeight = Math.max(\n                minHeight,\n                Math.min(\n                    textarea.scrollHeight,\n                    maxHeight ?? Number.POSITIVE_INFINITY\n                )\n            );\n\n            textarea.style.height = `${newHeight}px`;\n        },\n        [minHeight, maxHeight]\n    );\n\n    useEffect(() => {\n        // Set initial height\n        const textarea = textareaRef.current;\n        if (textarea) {\n            textarea.style.height = `${minHeight}px`;\n        }\n    }, [minHeight]);\n\n    // Adjust height on window resize\n    useEffect(() => {\n        const handleResize = () => adjustHeight();\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, [adjustHeight]);\n\n    return { textareaRef, adjustHeight };\n}\n",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    },
    {
      "type": "registry:hook",
      "content": "import { useState, useRef } from \"react\";\n\ninterface UseFileInputOptions {\n    accept?: string;\n    maxSize?: number;\n}\n\nexport function useFileInput({ accept, maxSize }: UseFileInputOptions) {\n    const [fileName, setFileName] = useState<string>(\"\");\n    const [error, setError] = useState<string>(\"\");\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const [fileSize, setFileSize] = useState<number>(0);\n\n    const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files?.[0];\n        validateAndSetFile(file);\n    };\n\n    const validateAndSetFile = (file: File | undefined) => {\n        setError(\"\");\n\n        if (file) {\n            if (maxSize && file.size > maxSize * 1024 * 1024) {\n                setError(`File size must be less than ${maxSize}MB`);\n                return;\n            }\n\n            if (\n                accept &&\n                !file.type.match(accept.replace(\"/*\", \"/\"))\n            ) {\n                setError(`File type must be ${accept}`);\n                return;\n            }\n\n            setFileSize(file.size);\n            setFileName(file.name);\n        }\n    };\n\n    const clearFile = () => {\n        setFileName(\"\");\n        setError(\"\");\n        setFileSize(0);\n        if (fileInputRef.current) {\n            fileInputRef.current.value = \"\";\n        }\n    };\n\n    return {\n        fileName,\n        error,\n        fileInputRef,\n        handleFileSelect,\n        validateAndSetFile,\n        clearFile,\n        fileSize,\n    };\n}\n",
      "path": "/hooks/use-file-input.ts",
      "target": "/hooks/use-file-input.ts"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, type RefObject } from \"react\";\n\nexport function useClickOutside(\n    ref: RefObject<HTMLElement>,\n    handler: () => void\n) {\n    useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            if (ref.current && !ref.current.contains(event.target as Node)) {\n                handler();\n            }\n        };\n\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () =>\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n    }, [ref, handler]);\n}\n",
      "path": "/hooks/use-click-outside.ts",
      "target": "/hooks/use-click-outside.ts"
    }
  ]
}