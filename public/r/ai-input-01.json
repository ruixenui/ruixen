{
  "name": "ai-input-01",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { CornerRightUp, Mic } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\n\nexport default function AIInput_01() {\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n        minHeight: 52,\n        maxHeight: 200,\n    });\n    const [inputValue, setInputValue] = useState(\"\");\n\n    const handleReset = () => {\n        setInputValue(\"\");\n        adjustHeight(true);\n    };\n\n    return (\n        <div className=\"w-full py-4\">\n            <div className=\"relative max-w-xl w-full mx-auto\">\n                <Textarea\n                    id=\"ai-input-01\"\n                    placeholder=\"Type your message...\"\n                    className={cn(\n                        \"max-w-xl bg-black/5 dark:bg-white/5 rounded-3xl pl-6 pr-16\",\n                        \"placeholder:text-black/50 dark:placeholder:text-white/50\",\n                        \"border-none ring-black/20 dark:ring-white/20\",\n                        \"text-black dark:text-white text-wrap\",\n                        \"overflow-y-auto resize-none\",\n                        \"focus-visible:ring-0 focus-visible:ring-offset-0\",\n                        \"transition-[height] duration-100 ease-out\",\n                        \"leading-[1.2] py-[16px]\",\n                        \"min-h-[52px]\",\n                        \"max-h-[200px]\"\n                    )}\n                    ref={textareaRef}\n                    value={inputValue}\n                    onChange={(e) => {\n                        setInputValue(e.target.value);\n                        adjustHeight();\n                    }}\n                    onKeyDown={(e) => {\n                        if (e.key === \"Enter\" && !e.shiftKey) {\n                            e.preventDefault();\n                            handleReset();\n                        }\n                    }}\n                />\n\n                <div\n                    className={cn(\n                        \"absolute top-1/2 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 py-1 px-1 transition-all duration-200\",\n                        inputValue ? \"right-10\" : \"right-3\"\n                    )}\n                >\n                    <Mic className=\"w-4 h-4 text-black/70 dark:text-white/70\" />\n                </div>\n                <button\n                    onClick={handleReset}\n                    type=\"button\"\n                    className={cn(\n                        \"absolute top-1/2 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 py-1 px-1 transition-all duration-700\",\n                        inputValue\n                            ? \"block right-3 animate-slide-in cursor-pointer\"\n                            : \"hidden\"\n                    )}\n                >\n                    <CornerRightUp className=\"w-4 h-4 text-black/70 dark:text-white/70 transition-opacity duration-700\" />\n                </button>\n            </div>\n        </div>\n    );\n}\n",
      "path": "/components/ruixenui/ai-input/ai-input-01.tsx",
      "target": "/components/ruixenui/ai-input-01.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, useRef, useCallback } from \"react\";\n\ninterface UseAutoResizeTextareaProps {\n    minHeight: number;\n    maxHeight?: number;\n}\n\nexport function useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n}: UseAutoResizeTextareaProps) {\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const adjustHeight = useCallback(\n        (reset?: boolean) => {\n            const textarea = textareaRef.current;\n            if (!textarea) return;\n\n            if (reset) {\n                textarea.style.height = `${minHeight}px`;\n                return;\n            }\n\n            // Temporarily shrink to get the right scrollHeight\n            textarea.style.height = `${minHeight}px`;\n\n            // Calculate new height\n            const newHeight = Math.max(\n                minHeight,\n                Math.min(\n                    textarea.scrollHeight,\n                    maxHeight ?? Number.POSITIVE_INFINITY\n                )\n            );\n\n            textarea.style.height = `${newHeight}px`;\n        },\n        [minHeight, maxHeight]\n    );\n\n    useEffect(() => {\n        // Set initial height\n        const textarea = textareaRef.current;\n        if (textarea) {\n            textarea.style.height = `${minHeight}px`;\n        }\n    }, [minHeight]);\n\n    // Adjust height on window resize\n    useEffect(() => {\n        const handleResize = () => adjustHeight();\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, [adjustHeight]);\n\n    return { textareaRef, adjustHeight };\n}\n",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}