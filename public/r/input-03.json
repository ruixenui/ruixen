{
  "name": "input-03",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Upload, X, FileText } from \"lucide-react\";\nimport { useFileInput } from \"@/hooks/use-file-input\";\n\nexport default function Input_03() {\n    const [isDragging, setIsDragging] = useState(false);\n    const [preview, setPreview] = useState<string | null>(null);\n    const [uploadProgress, setUploadProgress] = useState(0);\n    const {\n        fileName,\n        fileInputRef,\n        clearFile,\n        error,\n        validateAndSetFile,\n        fileSize,\n    } = useFileInput({ accept: \"image/*\", maxSize: 5 });\n\n    function handleFile(file: File) {\n        validateAndSetFile(file);\n\n        if (!error) {\n            simulateUpload(file);\n        }\n    }\n\n    function simulateUpload(file: File) {\n        let progress = 0;\n        const interval = setInterval(() => {\n            progress += 10;\n            setUploadProgress(progress);\n            if (progress >= 100) {\n                clearInterval(interval);\n                if (file.type.startsWith(\"image/\")) {\n                    const reader = new FileReader();\n                    reader.onloadend = () => {\n                        setPreview(reader.result as string);\n                    };\n                    reader.readAsDataURL(file);\n                }\n            }\n        }, 100);\n    }\n\n    function handleDrop(e: React.DragEvent) {\n        e.preventDefault();\n        setIsDragging(false);\n\n        const droppedFile = e.dataTransfer.files[0];\n        if (!droppedFile) return;\n\n        handleFile(droppedFile);\n    }\n\n    function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        const selectedFile = e.target.files?.[0];\n        if (!selectedFile) return;\n\n        handleFile(selectedFile);\n    }\n\n    function removeFile() {\n        clearFile();\n        setPreview(null);\n        setUploadProgress(0);\n    }\n\n    return (\n        <div className=\"w-full max-w-md space-y-2\">\n            <label className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\">\n                Upload file\n            </label>\n            <div\n                className={cn(\n                    \"relative group cursor-pointer\",\n                    \"rounded-lg border-2 border-dashed\",\n                    \"transition-colors duration-200\",\n                    isDragging\n                        ? \"border-indigo-500 bg-indigo-50/50 dark:bg-indigo-500/10\"\n                        : \"border-zinc-200 dark:border-zinc-800\"\n                )}\n                onDragOver={(e) => {\n                    e.preventDefault();\n                    setIsDragging(true);\n                }}\n                onDragLeave={() => setIsDragging(false)}\n                onDrop={handleDrop}\n                onClick={() => fileInputRef.current?.click()}\n                onKeyDown={(e) => {\n                    if (e.key === \"Enter\" || e.key === \" \") {\n                        e.preventDefault();\n                        fileInputRef.current?.click();\n                    }\n                }}\n                aria-label=\"Upload file\"\n            >\n                <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleChange}\n                    className=\"hidden\"\n                />\n\n                <div className=\"p-8 space-y-4\">\n                    {!fileName ? (\n                        <div className=\"flex flex-col items-center gap-2\">\n                            <Upload className=\"w-8 h-8 text-zinc-400 dark:text-zinc-500\" />\n                            <p className=\"text-sm text-zinc-600 dark:text-zinc-400\">\n                                Drag and drop or click to upload\n                            </p>\n                        </div>\n                    ) : (\n                        <div className=\"flex items-center gap-4\">\n                            {preview ? (\n                                <div className=\"relative w-16 h-16 rounded-lg overflow-hidden\">\n                                    <img\n                                        src={preview}\n                                        alt=\"Preview\"\n                                        className=\"w-full h-full object-cover\"\n                                    />\n                                </div>\n                            ) : (\n                                <div className=\"w-16 h-16 rounded-lg bg-zinc-100 dark:bg-zinc-800 flex items-center justify-center\">\n                                    <FileText className=\"w-8 h-8 text-zinc-400\" />\n                                </div>\n                            )}\n                            <div className=\"flex-1 min-w-0\">\n                                <p className=\"text-sm font-medium truncate\">\n                                    {fileName || \"No file selected\"}\n                                </p>\n                                <p className=\"text-xs text-zinc-500\">\n                                    {fileSize\n                                        ? `${(fileSize / 1024 / 1024).toFixed(\n                                              2\n                                          )} MB`\n                                        : \"0 MB\"}\n                                </p>\n                                {uploadProgress < 100 && (\n                                    <div className=\"mt-2 h-1 w-full bg-zinc-100 dark:bg-zinc-800 rounded-full overflow-hidden\">\n                                        <div\n                                            className=\"h-full bg-indigo-500 transition-all duration-200\"\n                                            style={{\n                                                width: `${uploadProgress}%`,\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                            <button\n                                type=\"button\"\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    removeFile();\n                                }}\n                                className=\"p-1 hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded\"\n                            >\n                                <X className=\"w-5 h-5 text-zinc-400\" />\n                            </button>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n",
      "path": "/components/ruixenui/input/input-03.tsx",
      "target": "/components/ruixenui/input-03.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useState, useRef } from \"react\";\n\ninterface UseFileInputOptions {\n    accept?: string;\n    maxSize?: number;\n}\n\nexport function useFileInput({ accept, maxSize }: UseFileInputOptions) {\n    const [fileName, setFileName] = useState<string>(\"\");\n    const [error, setError] = useState<string>(\"\");\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const [fileSize, setFileSize] = useState<number>(0);\n\n    const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files?.[0];\n        validateAndSetFile(file);\n    };\n\n    const validateAndSetFile = (file: File | undefined) => {\n        setError(\"\");\n\n        if (file) {\n            if (maxSize && file.size > maxSize * 1024 * 1024) {\n                setError(`File size must be less than ${maxSize}MB`);\n                return;\n            }\n\n            if (\n                accept &&\n                !file.type.match(accept.replace(\"/*\", \"/\"))\n            ) {\n                setError(`File type must be ${accept}`);\n                return;\n            }\n\n            setFileSize(file.size);\n            setFileName(file.name);\n        }\n    };\n\n    const clearFile = () => {\n        setFileName(\"\");\n        setError(\"\");\n        setFileSize(0);\n        if (fileInputRef.current) {\n            fileInputRef.current.value = \"\";\n        }\n    };\n\n    return {\n        fileName,\n        error,\n        fileInputRef,\n        handleFileSelect,\n        validateAndSetFile,\n        clearFile,\n        fileSize,\n    };\n}\n",
      "path": "/hooks/use-file-input.ts",
      "target": "/hooks/use-file-input.ts"
    }
  ]
}