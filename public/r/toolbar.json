{
  "name": "toolbar",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n    Filter,\n    Settings,\n    Download,\n    Share2,\n    type LucideIcon,\n    User,\n    Bell,\n    Sun,\n    Edit2,\n    Lock,\n} from \"lucide-react\";\n\ninterface ToolbarItem {\n    id: string;\n    title: string;\n    icon: LucideIcon;\n    type?: never;\n}\n\ninterface ToolbarProps {\n    className?: string;\n    activeColor?: string;\n    onSearch?: (value: string) => void;\n}\n\nconst buttonVariants = {\n    initial: {\n        gap: 0,\n        paddingLeft: \".5rem\",\n        paddingRight: \".5rem\",\n    },\n    animate: (isSelected: boolean) => ({\n        gap: isSelected ? \".5rem\" : 0,\n        paddingLeft: isSelected ? \"1rem\" : \".5rem\",\n        paddingRight: isSelected ? \"1rem\" : \".5rem\",\n    }),\n};\n\nconst spanVariants = {\n    initial: { width: 0, opacity: 0 },\n    animate: { width: \"auto\", opacity: 1 },\n    exit: { width: 0, opacity: 0 },\n};\n\nconst notificationVariants = {\n    initial: { opacity: 0, y: 10 },\n    animate: { opacity: 1, y: -10 },\n    exit: { opacity: 0, y: -20 },\n};\n\nconst lineVariants = {\n    initial: { scaleX: 0, x: \"-50%\" },\n    animate: {\n        scaleX: 1,\n        x: \"0%\",\n        transition: { duration: 0.2, ease: \"easeOut\" },\n    },\n    exit: {\n        scaleX: 0,\n        x: \"50%\",\n        transition: { duration: 0.2, ease: \"easeIn\" },\n    },\n};\n\nconst transition = { type: \"spring\", bounce: 0, duration: 0.4 };\n\nexport function Toolbar({\n    className,\n    activeColor = \"text-primary\",\n    onSearch,\n}: ToolbarProps) {\n    const [selected, setSelected] = React.useState<string | null>(\"filter\");\n    const [isToggled, setIsToggled] = React.useState(false);\n    const [activeNotification, setActiveNotification] = React.useState<\n        string | null\n    >(null);\n    const outsideClickRef = React.useRef(null);\n\n    const toolbarItems: ToolbarItem[] = [\n        { id: \"filter\", title: \"Filter\", icon: Filter },\n        { id: \"settings\", title: \"Settings\", icon: Settings },\n        { id: \"download\", title: \"Download\", icon: Download },\n        { id: \"share\", title: \"Share\", icon: Share2 },\n        { id: \"notifications\", title: \"Notifications\", icon: Bell },\n        { id: \"profile\", title: \"Profile\", icon: User },\n        { id: \"theme\", title: \"Theme\", icon: Sun },\n    ];\n\n    const handleItemClick = (itemId: string) => {\n        setSelected(selected === itemId ? null : itemId);\n        setActiveNotification(itemId);\n        setTimeout(() => setActiveNotification(null), 1500);\n    };\n\n    return (\n        <div className=\"space-y-2\">\n            <div\n                ref={outsideClickRef}\n                className={cn(\n                    \"flex items-center gap-3 p-2 relative\",\n                    \"bg-background\",\n                    \"border rounded-xl\",\n                    \"transition-all duration-200\",\n                    className\n                )}\n            >\n                <AnimatePresence>\n                    {activeNotification && (\n                        <motion.div\n                            variants={notificationVariants}\n                            initial=\"initial\"\n                            animate=\"animate\"\n                            exit=\"exit\"\n                            transition={{ duration: 0.3 }}\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 z-50\"\n                        >\n                            <div className=\"bg-primary text-primary-foreground px-3 py-1 rounded-full text-xs\">\n                                {\n                                    toolbarItems.find(\n                                        (item) => item.id === activeNotification\n                                    )?.title\n                                }{\" \"}\n                                clicked!\n                            </div>\n                            <motion.div\n                                variants={lineVariants}\n                                initial=\"initial\"\n                                animate=\"animate\"\n                                exit=\"exit\"\n                                className=\"absolute -bottom-1 left-1/2 w-full h-[2px] bg-primary origin-left\"\n                            />\n                        </motion.div>\n                    )}\n                </AnimatePresence>\n\n                <div className=\"flex items-center gap-2\">\n                    {toolbarItems.map((item) => (\n                        <motion.button\n                            key={item.id}\n                            variants={buttonVariants}\n                            initial={false}\n                            animate=\"animate\"\n                            custom={selected === item.id}\n                            onClick={() => handleItemClick(item.id)}\n                            transition={transition}\n                            className={cn(\n                                \"relative flex items-center rounded-none px-3 py-2\",\n                                \"text-sm font-medium transition-colors duration-300\",\n                                selected === item.id\n                                    ? \"bg-[#1F9CFE] text-white rounded-lg\"\n                                    : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n                            )}\n                        >\n                            <item.icon\n                                size={16}\n                                className={cn(\n                                    selected === item.id && \"text-white\"\n                                )}\n                            />\n                            <AnimatePresence initial={false}>\n                                {selected === item.id && (\n                                    <motion.span\n                                        variants={spanVariants}\n                                        initial=\"initial\"\n                                        animate=\"animate\"\n                                        exit=\"exit\"\n                                        transition={transition}\n                                        className=\"overflow-hidden\"\n                                    >\n                                        {item.title}\n                                    </motion.span>\n                                )}\n                            </AnimatePresence>\n                        </motion.button>\n                    ))}\n\n                    <motion.button\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setIsToggled(!isToggled)}\n                        className=\"flex items-center gap-2 px-4 py-2\n                            bg-primary text-primary-foreground\n                            rounded-xl \n                            border border-primary/30\n                            shadow-sm \n                            transition-all duration-200\n                            hover:shadow-md \n                            hover:bg-primary/90\n                            hover:border-primary/40\n                            active:border-primary/50\"\n                    >\n                        {isToggled ? (\n                            <Edit2 className=\"w-3.5 h-3.5\" />\n                        ) : (\n                            <Lock className=\"w-3.5 h-3.5\" />\n                        )}\n                        <span className=\"text-sm font-medium\">\n                            {isToggled ? \"On\" : \"Off\"}\n                        </span>\n                    </motion.button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Toolbar;\n",
      "path": "/components/ruixenui/toolbar.tsx",
      "target": "/components/ruixenui/toolbar.tsx"
    }
  ]
}