{
  "name": "file-upload",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "card"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport {\n    useState,\n    useRef,\n    useCallback,\n    type DragEvent,\n    useEffect,\n} from \"react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { UploadCloud, File as FileIcon, X, CheckCircle } from \"lucide-react\";\n\ntype UploadStatus = \"idle\" | \"dragging\" | \"uploading\" | \"success\" | \"error\";\n\ninterface FileUploadProps {\n    onUploadSuccess?: (file: File) => void;\n    onUploadError?: (error: string) => void;\n    acceptedFileTypes?: string[]; // e.g., [\"image/png\", \"image/jpeg\"]\n    maxFileSize?: number; // in bytes\n    currentFile?: File | null; // Add current file prop\n    onFileRemove?: () => void; // Add callback for file removal\n}\n\nconst cardVariants = {\n    initial: { opacity: 0, y: 20 },\n    animate: { opacity: 1, y: 0 },\n    exit: { opacity: 0, y: -20 },\n};\n\nconst dropzoneVariants = {\n    idle: {\n        scale: 1,\n        borderColor: \"var(--border-color)\",\n        backgroundColor: \"var(--bg-color)\",\n    },\n    dragging: {\n        scale: 1.02,\n        borderColor: \"var(--primary-color)\",\n        backgroundColor: \"var(--primary-bg)\",\n        transition: {\n            type: \"spring\",\n            stiffness: 400,\n            damping: 25,\n        },\n    },\n};\n\nconst iconVariants = {\n    idle: { y: 0, scale: 1 },\n    dragging: {\n        y: -5,\n        scale: 1.1,\n        transition: {\n            repeat: Number.POSITIVE_INFINITY,\n            repeatType: \"reverse\" as const,\n            duration: 1,\n            ease: \"easeInOut\",\n        },\n    },\n};\n\nconst progressVariants = {\n    initial: { pathLength: 0, opacity: 0 },\n    animate: (progress: number) => ({\n        pathLength: progress / 100,\n        opacity: 1,\n        transition: { duration: 0.5, ease: \"easeOut\" },\n    }),\n};\n\nconst successIconVariants = {\n    initial: { scale: 0, rotate: -180 },\n    animate: {\n        scale: 1,\n        rotate: 0,\n        transition: {\n            type: \"spring\",\n            stiffness: 200,\n            damping: 20,\n        },\n    },\n};\n\nexport default function FileUpload({\n    onUploadSuccess,\n    onUploadError,\n    acceptedFileTypes,\n    maxFileSize = 5 * 1024 * 1024,\n    currentFile: initialFile = null,\n    onFileRemove,\n}: FileUploadProps) {\n    const [file, setFile] = useState<File | null>(initialFile);\n    const [status, setStatus] = useState<UploadStatus>(\"idle\");\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n    const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        if (file?.type?.startsWith(\"image/\")) {\n            const url = URL.createObjectURL(file);\n            setPreviewUrl(url);\n            return () => URL.revokeObjectURL(url);\n        }\n        return () => setPreviewUrl(null);\n    }, [file]);\n\n    const handleFileValidation = (selectedFile: File): boolean => {\n        setError(null);\n        if (\n            acceptedFileTypes &&\n            acceptedFileTypes.length > 0 &&\n            !acceptedFileTypes.includes(selectedFile.type)\n        ) {\n            const err = `Invalid file type. Accepted: ${acceptedFileTypes\n                .map((t) => t.split(\"/\")[1])\n                .join(\", \")\n                .toUpperCase()}`;\n            setError(err);\n            setStatus(\"error\");\n            if (onUploadError) onUploadError(err);\n            return false;\n        }\n        if (maxFileSize && selectedFile.size > maxFileSize) {\n            const err = `File size exceeds the limit of ${formatBytes(\n                maxFileSize\n            )}.`;\n            setError(err);\n            setStatus(\"error\");\n            if (onUploadError) onUploadError(err);\n            return false;\n        }\n        return true;\n    };\n\n    const handleFileSelect = (selectedFile: File | null) => {\n        if (!selectedFile) return;\n\n        if (!handleFileValidation(selectedFile)) {\n            setFile(null); // Clear invalid file\n            // Keep the error state active\n            return;\n        }\n\n        setFile(selectedFile);\n        setError(null);\n        setStatus(\"uploading\");\n        setProgress(0);\n        simulateUpload(selectedFile);\n    };\n\n    const handleDragOver = useCallback(\n        (e: DragEvent<HTMLDivElement>) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (status !== \"uploading\" && status !== \"success\") {\n                setStatus(\"dragging\");\n            }\n        },\n        [status]\n    );\n\n    const handleDragLeave = useCallback(\n        (e: DragEvent<HTMLDivElement>) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (status === \"dragging\") {\n                setStatus(\"idle\");\n            }\n        },\n        [status]\n    );\n\n    const handleDrop = useCallback(\n        (e: DragEvent<HTMLDivElement>) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (status === \"uploading\" || status === \"success\") return; // Don't allow drop during/after upload\n\n            setStatus(\"idle\");\n            const droppedFile = e.dataTransfer.files?.[0];\n            if (droppedFile) {\n                handleFileSelect(droppedFile);\n            }\n        },\n        [status, handleFileSelect]\n    ); // Add dependencies\n\n    const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const selectedFile = e.target.files?.[0];\n        handleFileSelect(selectedFile || null);\n        // Reset input value to allow selecting the same file again\n        if (e.target) e.target.value = \"\";\n    };\n\n    const triggerFileInput = () => {\n        if (status === \"uploading\" || status === \"success\") return; // Prevent opening dialog when not idle/error\n        fileInputRef.current?.click();\n    };\n\n    const simulateUpload = (uploadingFile: File) => {\n        let currentProgress = 0;\n        const interval = setInterval(() => {\n            currentProgress += Math.random() * 10 + 10; // Simulate progress increments\n            if (currentProgress >= 100) {\n                clearInterval(interval);\n                setProgress(100);\n                setStatus(\"success\");\n                if (onUploadSuccess) {\n                    onUploadSuccess(uploadingFile);\n                }\n                // Optional: Reset after a delay\n                //  setTimeout(() => {\n                //     resetState();\n                // }, 3000);\n            } else {\n                // Check if still in uploading state before updating progress\n                setStatus((prevStatus) => {\n                    if (prevStatus === \"uploading\") {\n                        setProgress(currentProgress);\n                        return \"uploading\";\n                    }\n                    // If status changed (e.g., user clicked reset), stop the simulation\n                    clearInterval(interval);\n                    return prevStatus;\n                });\n            }\n        }, 200);\n    };\n\n    const resetState = () => {\n        setFile(null);\n        setStatus(\"idle\");\n        setProgress(0);\n        setError(null);\n        setPreviewUrl(null);\n    };\n\n    const handleRemoveFile = useCallback(() => {\n        setFile(null);\n        setStatus(\"idle\");\n        setProgress(0);\n        setError(null);\n        setPreviewUrl(null);\n        if (onFileRemove) onFileRemove();\n    }, [onFileRemove]);\n\n    const formatBytes = (bytes: number, decimals = 2): string => {\n        if (!+bytes) return \"0 Bytes\";\n\n        const k = 1024;\n        const dm = decimals < 0 ? 0 : decimals;\n        const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n        // Ensure index is within bounds\n        const unit = sizes[i] || sizes[sizes.length - 1];\n\n        return `${Number.parseFloat((bytes / k ** i).toFixed(dm))} ${unit}`;\n    };\n\n    return (\n        <motion.div\n            variants={cardVariants}\n            initial=\"initial\"\n            animate=\"animate\"\n            exit=\"exit\"\n            className=\"relative\"\n            style={\n                {\n                    \"--border-color\": \"rgb(var(--zinc-200) / 0.5)\",\n                    \"--bg-color\": \"rgb(var(--zinc-50) / 0.3)\",\n                    \"--primary-color\": \"rgb(var(--violet-500))\",\n                    \"--primary-bg\": \"rgb(var(--violet-50) / 0.2)\",\n                } as React.CSSProperties\n            }\n        >\n            <Card className=\"w-full max-w-md mx-auto overflow-hidden min-h-[250px] flex flex-col bg-white dark:bg-zinc-900 border-zinc-200/50 dark:border-zinc-800/50 shadow-lg shadow-zinc-200/50 dark:shadow-zinc-900/50\">\n                <CardContent className=\"p-6 flex-1 flex flex-col items-center justify-center text-center relative\">\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-violet-50/20 via-transparent to-sky-50/20 dark:from-violet-500/5 dark:via-transparent dark:to-sky-500/5\" />\n                    <div className=\"relative z-10 w-full\">\n                        <AnimatePresence mode=\"wait\" initial={false}>\n                            {file &&\n                            (status === \"success\" || status !== \"uploading\") ? (\n                                <motion.div\n                                    key=\"preview\"\n                                    initial={{ opacity: 0, scale: 0.8, y: 20 }}\n                                    animate={{ opacity: 1, scale: 1, y: 0 }}\n                                    exit={{ opacity: 0, scale: 0.8, y: -20 }}\n                                    transition={{\n                                        type: \"spring\",\n                                        stiffness: 300,\n                                        damping: 25,\n                                    }}\n                                    className=\"flex flex-col items-center text-center w-full\"\n                                    aria-live=\"polite\"\n                                >\n                                    {previewUrl && (\n                                        <motion.div\n                                            className=\"relative w-32 h-32 mb-4 rounded-lg overflow-hidden ring-2 ring-violet-500/20\"\n                                            initial={{\n                                                rotate: -10,\n                                                scale: 0.9,\n                                            }}\n                                            animate={{ rotate: 0, scale: 1 }}\n                                            transition={{\n                                                type: \"spring\",\n                                                stiffness: 300,\n                                                damping: 20,\n                                            }}\n                                        >\n                                            <img\n                                                src={previewUrl}\n                                                alt={`Preview of ${file.name}`}\n                                                className=\"w-full h-full object-cover\"\n                                            />\n                                        </motion.div>\n                                    )}\n                                    {!previewUrl && (\n                                        <FileIcon\n                                            className=\"w-16 h-16 mb-4 text-violet-500\"\n                                            aria-hidden=\"true\"\n                                        />\n                                    )}\n                                    <h3 className=\"text-lg font-semibold text-zinc-900 dark:text-zinc-100 mb-2\">\n                                        Current File\n                                    </h3>\n                                    <div className=\"w-full max-w-xs bg-zinc-50/50 dark:bg-zinc-800/50 rounded-lg p-3 mb-4 backdrop-blur-sm\">\n                                        <p\n                                            className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100 mb-2 truncate\"\n                                            title={file.name}\n                                        >\n                                            {file.name}\n                                        </p>\n                                        <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                                            <div className=\"flex flex-col space-y-1\">\n                                                <span className=\"text-zinc-500 dark:text-zinc-400\">\n                                                    Size\n                                                </span>\n                                                <span className=\"font-medium text-zinc-700 dark:text-zinc-300\">\n                                                    {formatBytes(file.size)}\n                                                </span>\n                                            </div>\n                                            <div className=\"flex flex-col space-y-1\">\n                                                <span className=\"text-zinc-500 dark:text-zinc-400\">\n                                                    Type\n                                                </span>\n                                                <span className=\"font-medium text-zinc-700 dark:text-zinc-300\">\n                                                    {file.type\n                                                        .split(\"/\")[1]\n                                                        .toUpperCase() ||\n                                                        \"Unknown\"}\n                                                </span>\n                                            </div>\n                                            <div className=\"flex flex-col space-y-1\">\n                                                <span className=\"text-zinc-500 dark:text-zinc-400\">\n                                                    Modified\n                                                </span>\n                                                <span className=\"font-medium text-zinc-700 dark:text-zinc-300\">\n                                                    {new Date(\n                                                        file.lastModified\n                                                    ).toLocaleDateString()}\n                                                </span>\n                                            </div>\n                                            <div className=\"flex flex-col space-y-1\">\n                                                <span className=\"text-zinc-500 dark:text-zinc-400\">\n                                                    Status\n                                                </span>\n                                                <span className=\"font-medium text-emerald-600 dark:text-emerald-400\">\n                                                    Ready\n                                                </span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"flex gap-2\">\n                                        <button\n                                            onClick={() => triggerFileInput()}\n                                            type=\"button\"\n                                            className=\"px-4 py-2 text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 dark:bg-violet-500 dark:hover:bg-violet-600 rounded-lg transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-violet-500 focus-visible:ring-offset-2 dark:focus-visible:ring-offset-zinc-900\"\n                                            aria-label=\"Replace file\"\n                                        >\n                                            Replace File\n                                        </button>\n                                        <button\n                                            onClick={handleRemoveFile}\n                                            type=\"button\"\n                                            className=\"px-4 py-2 text-sm font-medium text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 border border-red-200 hover:border-red-300 dark:border-red-800 dark:hover:border-red-700 rounded-lg transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-red-500 focus-visible:ring-offset-2 dark:focus-visible:ring-offset-zinc-900\"\n                                            aria-label=\"Remove file\"\n                                        >\n                                            Remove\n                                        </button>\n                                    </div>\n                                </motion.div>\n                            ) : status === \"idle\" || status === \"dragging\" ? (\n                                <motion.div\n                                    key=\"dropzone\"\n                                    variants={dropzoneVariants}\n                                    initial=\"idle\"\n                                    animate={\n                                        status === \"dragging\"\n                                            ? \"dragging\"\n                                            : \"idle\"\n                                    }\n                                    className={`w-full h-full flex flex-col items-center justify-center p-8 border-2 border-dashed rounded-lg\n                                        ${\n                                            status === \"dragging\"\n                                                ? \"border-violet-500 dark:border-violet-400 bg-violet-50/20 dark:bg-violet-500/10\"\n                                                : \"border-zinc-200/50 dark:border-zinc-800/50 hover:border-violet-400 dark:hover:border-violet-600 hover:bg-violet-50/10 dark:hover:bg-violet-500/5 group cursor-pointer\"\n                                        } transition-all duration-500 ease-in-out backdrop-blur-sm relative overflow-hidden`}\n                                    onDragOver={handleDragOver}\n                                    onDragLeave={handleDragLeave}\n                                    onDrop={handleDrop}\n                                    onClick={triggerFileInput}\n                                    onKeyDown={(e) => {\n                                        if (\n                                            e.key === \"Enter\" ||\n                                            e.key === \" \"\n                                        ) {\n                                            e.preventDefault();\n                                            triggerFileInput();\n                                        }\n                                    }}\n                                    aria-label=\"File upload dropzone\"\n                                >\n                                    <div className=\"absolute inset-0 pointer-events-none\">\n                                        <div className=\"absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-700\">\n                                            <div className=\"absolute inset-0 bg-gradient-to-b from-violet-500/[0.02] via-transparent to-violet-500/[0.02] dark:from-violet-400/[0.02] dark:to-violet-400/[0.02] animate-shimmer\" />\n                                            <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(139,92,246,0.02),transparent_70%)] dark:bg-[radial-gradient(circle_at_50%_50%,rgba(139,92,246,0.03),transparent_70%)] opacity-0 group-hover:opacity-100 transition-opacity duration-700\" />\n                                        </div>\n                                    </div>\n                                    <motion.div\n                                        variants={iconVariants}\n                                        initial=\"idle\"\n                                        animate={\n                                            status === \"dragging\"\n                                                ? \"dragging\"\n                                                : \"idle\"\n                                        }\n                                    >\n                                        <UploadCloud\n                                            className={`w-12 h-12 mb-4 ${\n                                                status === \"dragging\"\n                                                    ? \"text-violet-600 dark:text-violet-400\"\n                                                    : \"text-zinc-400 dark:text-zinc-500 group-hover:text-violet-500 group-hover:translate-y-[-2px]\"\n                                            } transform transition-all duration-500 ease-out`}\n                                            aria-label=\"Upload cloud icon\"\n                                        />\n                                    </motion.div>\n                                    <p className=\"mb-2 text-sm text-zinc-600 dark:text-zinc-400 transition-all duration-500\">\n                                        <span className=\"font-semibold text-violet-600/90 dark:text-violet-400/90 group-hover:text-violet-600 dark:group-hover:text-violet-400 transition-colors duration-500\">\n                                            Click to upload\n                                        </span>{\" \"}\n                                        or drag and drop\n                                    </p>\n                                    <p className=\"text-xs text-zinc-500/90 dark:text-zinc-500/90 group-hover:text-zinc-500 dark:group-hover:text-zinc-400 transition-colors duration-500\">\n                                        {acceptedFileTypes &&\n                                        acceptedFileTypes.length > 0\n                                            ? `Accepted: ${acceptedFileTypes\n                                                  .map((t) => t.split(\"/\")[1])\n                                                  .join(\", \")\n                                                  .toUpperCase()}`\n                                            : \"SVG, PNG, JPG or GIF\"}{\" \"}\n                                        {/* Default text */}\n                                        {maxFileSize &&\n                                            ` (Max ${formatBytes(\n                                                maxFileSize\n                                            )})`}\n                                    </p>\n                                    <input\n                                        ref={fileInputRef}\n                                        type=\"file\"\n                                        className=\"sr-only\"\n                                        onChange={handleFileInputChange}\n                                        accept={acceptedFileTypes?.join(\",\")}\n                                        aria-label=\"File input\"\n                                    />\n                                </motion.div>\n                            ) : status === \"uploading\" && file ? (\n                                <motion.div\n                                    key=\"uploading\"\n                                    initial={{ opacity: 0, scale: 0.9 }}\n                                    animate={{ opacity: 1, scale: 1 }}\n                                    exit={{ opacity: 0, scale: 0.9 }}\n                                    transition={{\n                                        type: \"spring\",\n                                        stiffness: 300,\n                                        damping: 25,\n                                    }}\n                                    className=\"w-full flex flex-col items-center\"\n                                    aria-live=\"polite\"\n                                    aria-busy=\"true\"\n                                >\n                                    <div className=\"w-16 h-16 mb-4 relative flex items-center justify-center\">\n                                        <motion.svg\n                                            className=\"w-full h-full transform -rotate-90\"\n                                            viewBox=\"0 0 36 36\"\n                                            initial={{ rotate: 0 }}\n                                            animate={{ rotate: 360 }}\n                                            transition={{\n                                                duration: 2,\n                                                repeat: Number.POSITIVE_INFINITY,\n                                                ease: \"linear\",\n                                            }}\n                                            aria-label=\"Upload progress indicator\"\n                                            role=\"progressbar\"\n                                            aria-valuemin={0}\n                                            aria-valuemax={100}\n                                            aria-valuenow={progress}\n                                        >\n                                            <circle\n                                                cx=\"18\"\n                                                cy=\"18\"\n                                                r=\"16\"\n                                                fill=\"none\"\n                                                className=\"stroke-current text-zinc-100 dark:text-zinc-800\"\n                                                strokeWidth=\"2.5\"\n                                            />\n                                            <motion.circle\n                                                cx=\"18\"\n                                                cy=\"18\"\n                                                r=\"16\"\n                                                fill=\"none\"\n                                                className=\"stroke-current text-violet-500 dark:text-violet-400\"\n                                                strokeWidth=\"2.5\"\n                                                strokeDasharray=\"100\"\n                                                variants={progressVariants}\n                                                initial=\"initial\"\n                                                animate=\"animate\"\n                                                custom={progress}\n                                            />\n                                        </motion.svg>\n                                        <motion.div\n                                            initial={{ scale: 0 }}\n                                            animate={{ scale: 1 }}\n                                            transition={{\n                                                delay: 0.2,\n                                                type: \"spring\",\n                                                stiffness: 300,\n                                                damping: 25,\n                                            }}\n                                        >\n                                            <FileIcon\n                                                className=\"w-8 h-8 absolute text-violet-600 dark:text-violet-400\"\n                                                aria-hidden=\"true\"\n                                            />\n                                        </motion.div>\n                                    </div>\n                                    <p\n                                        className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100 mb-1 truncate max-w-[200px]\"\n                                        title={file.name}\n                                    >\n                                        {file.name}\n                                    </p>\n                                    <p className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n                                        Uploading... {Math.round(progress)}%\n                                    </p>\n                                    <button\n                                        onClick={resetState}\n                                        type=\"button\"\n                                        className=\"mt-4 px-3 py-1.5 text-xs font-medium text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 rounded-md border border-red-200/50 dark:border-red-800/50 hover:bg-red-50/50 dark:hover:bg-red-900/20 transition-all duration-300\"\n                                        aria-label=\"Cancel upload\"\n                                    >\n                                        Cancel\n                                    </button>\n                                </motion.div>\n                            ) : status === \"success\" && file ? (\n                                <motion.div\n                                    key=\"success\"\n                                    initial={{ opacity: 0, scale: 0.8 }}\n                                    animate={{ opacity: 1, scale: 1 }}\n                                    transition={{\n                                        type: \"spring\",\n                                        stiffness: 300,\n                                        damping: 25,\n                                    }}\n                                    className=\"flex flex-col items-center text-center\"\n                                    aria-live=\"polite\"\n                                >\n                                    <div className=\"relative mb-4\">\n                                        <motion.div\n                                            className=\"absolute inset-0 blur-2xl bg-emerald-500/10 dark:bg-emerald-500/20 rounded-full\"\n                                            initial={{ opacity: 0, scale: 0.8 }}\n                                            animate={{ opacity: 1, scale: 1.5 }}\n                                            transition={{\n                                                delay: 0.1,\n                                                duration: 0.8,\n                                                ease: \"easeOut\",\n                                            }}\n                                        />\n                                        <motion.div\n                                            variants={successIconVariants}\n                                            initial=\"initial\"\n                                            animate=\"animate\"\n                                        >\n                                            <CheckCircle\n                                                className=\"w-16 h-16 text-emerald-500 dark:text-emerald-400 relative z-10 drop-shadow-lg\"\n                                                aria-label=\"Success\"\n                                            />\n                                        </motion.div>\n                                    </div>\n                                    <h3 className=\"text-lg font-semibold text-zinc-900 dark:text-zinc-100 mb-1\">\n                                        Upload Successful!\n                                    </h3>\n                                    <p\n                                        className=\"text-sm text-zinc-600 dark:text-zinc-400 mb-4 truncate max-w-[200px]\"\n                                        title={file.name}\n                                    >\n                                        {file.name} ({formatBytes(file.size)})\n                                    </p>\n                                    <button\n                                        onClick={resetState}\n                                        type=\"button\"\n                                        className=\"px-4 py-2 text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 dark:bg-violet-500 dark:hover:bg-violet-600 rounded-lg transition-all duration-300 shadow-lg shadow-violet-500/20 dark:shadow-violet-500/10 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-violet-500 focus-visible:ring-offset-2 dark:focus-visible:ring-offset-zinc-900\"\n                                        aria-label=\"Upload another file\"\n                                    >\n                                        Upload Another File\n                                    </button>\n                                </motion.div>\n                            ) : status === \"error\" ? (\n                                <motion.div\n                                    key=\"error\"\n                                    initial={{\n                                        opacity: 0,\n                                        scale: 0.8,\n                                        rotate: -10,\n                                    }}\n                                    animate={{\n                                        opacity: 1,\n                                        scale: 1,\n                                        rotate: 0,\n                                    }}\n                                    exit={{\n                                        opacity: 0,\n                                        scale: 0.8,\n                                        rotate: 10,\n                                    }}\n                                    transition={{\n                                        type: \"spring\",\n                                        stiffness: 300,\n                                        damping: 25,\n                                    }}\n                                    className=\"flex flex-col items-center text-center text-red-600 dark:text-red-500\"\n                                    role=\"alert\"\n                                >\n                                    <motion.div\n                                        initial={{ rotate: 0 }}\n                                        animate={{\n                                            rotate: [0, -10, 10, -10, 10, 0],\n                                        }}\n                                        transition={{\n                                            duration: 0.5,\n                                            ease: \"easeInOut\",\n                                        }}\n                                    >\n                                        <X\n                                            className=\"w-12 h-12 mb-3\"\n                                            aria-hidden=\"true\"\n                                        />\n                                    </motion.div>\n                                    <p className=\"text-sm font-medium mb-1\">\n                                        Upload Failed\n                                    </p>\n                                    <p className=\"text-xs mb-4 max-w-xs\">\n                                        {error || \"An unknown error occurred.\"}\n                                    </p>\n                                    <button\n                                        onClick={resetState}\n                                        type=\"button\"\n                                        className=\"px-4 py-2 text-sm font-medium text-zinc-700 dark:text-zinc-300 bg-zinc-100/80 hover:bg-zinc-200/80 dark:bg-zinc-800/80 dark:hover:bg-zinc-700/80 rounded-lg transition-all duration-300 backdrop-blur-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-zinc-500 focus-visible:ring-offset-2 dark:focus-visible:ring-offset-zinc-900\"\n                                        aria-label=\"Try uploading again\"\n                                    >\n                                        Try Again\n                                    </button>\n                                </motion.div>\n                            ) : null}\n                        </AnimatePresence>\n                    </div>\n                </CardContent>\n            </Card>\n        </motion.div>\n    );\n}\n",
      "path": "/components/ruixenui/file-upload.tsx",
      "target": "/components/ruixenui/file-upload.tsx"
    }
  ]
}