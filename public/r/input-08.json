{
  "name": "input-08",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState, useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Check, Copy } from \"lucide-react\";\nimport { useCopyToClipboard } from \"@/hooks/use-copy-to-clipboard\";\n\ninterface ColorInputProps {\n  onChange?: (color: string) => void; // Callback for final color\n  defaultValue?: string; // Default color\n  swatches?: string[]; // Swatches for quick selection\n  showOpacity?: boolean; // Whether to show the opacity slider\n  label?: string; // Label for the input\n}\n\nconst defaultSwatches = [\n  \"#ef4444\",\n  \"#f97316\",\n  \"#f59e0b\",\n  \"#84cc16\",\n  \"#22c55e\",\n  \"#06b6d4\",\n  \"#3b82f6\",\n  \"#6366f1\",\n  \"#8b5cf6\",\n  \"#d946ef\",\n  \"#ec4899\",\n  \"#f43f5e\",\n];\n\n// Helper to calculate final color with opacity\nconst generateFinalColor = (color: string, opacity: number): string => {\n  if (opacity === 100) return color; // No need to calculate if opacity is 100%\n  const alpha = Math.round(opacity * 2.55) // Convert opacity (0-100) to 0-255\n    .toString(16) // Convert to hexadecimal\n    .padStart(2, \"0\"); // Ensure 2 digits (e.g., \"0F\")\n  return `${color}${alpha}`;\n};\n\nexport default function Input_08({\n  onChange,\n  defaultValue = \"#3b82f6\",\n  swatches = defaultSwatches,\n  showOpacity = true,\n  label = \"Color\",\n}: ColorInputProps) {\n  const [color, setColor] = useState(defaultValue); // Base color without opacity\n  const [opacity, setOpacity] = useState(100); // Opacity (0-100)\n  const { isCopied, copyToClipboard } = useCopyToClipboard();\n\n  const finalColor = generateFinalColor(color, opacity); // Calculate the final color\n\n  // Trigger the onChange callback whenever color or opacity changes\n  const updateFinalColor = (newColor: string, newOpacity = opacity) => {\n    const updatedColor = generateFinalColor(newColor, newOpacity);\n    setColor(newColor);\n    onChange?.(updatedColor); // Pass final color to parent\n  };\n\n  const updateOpacity = (newOpacity: number) => {\n    setOpacity(newOpacity);\n    onChange?.(generateFinalColor(color, newOpacity)); // Pass final color to parent\n  };\n\n  const handleCopy = () => {\n    copyToClipboard(finalColor); // Copy the final color\n  };\n\n  return (\n    <div className=\"w-full max-w-xs space-y-2 relative z-10 min-h-[200px]\">\n      {label && (\n        <label\n          htmlFor=\"color-input\"\n          className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\"\n        >\n          {label}\n        </label>\n      )}\n\n      {/* Color Picker */}\n      <div className=\"p-3 bg-white dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-lg\">\n        {/* Color Preview & Input */}\n        <div className=\"flex gap-2 items-center\">\n          <div\n            className=\"w-8 h-8 rounded-md border border-zinc-200 dark:border-zinc-700\"\n            style={{ backgroundColor: finalColor }} // Display final color\n          />\n          <input\n            id=\"color-input\"\n            type=\"text\"\n            value={finalColor.toUpperCase()} // Show final color\n            onChange={(e) => {\n              const value = e.target.value.slice(0, 7); // Extract base color\n              if (/^#[0-9A-F]{6}$/i.test(value)) {\n                updateFinalColor(value);\n              }\n            }}\n            className={cn(\n              \"flex-1 px-2 py-1 rounded-md border border-zinc-200 dark:border-zinc-800\",\n              \"bg-white dark:bg-zinc-900 text-sm font-mono\",\n              \"focus:outline-hidden focus:ring-2 focus:ring-indigo-500/20\"\n            )}\n          />\n          <button type=\"button\" onClick={handleCopy} className=\"ml-2 hover:opacity-70\">\n            {isCopied ? (\n              <Check className=\"w-4 h-4 text-green-500\" />\n            ) : (\n              <Copy className=\"w-4 h-4 text-zinc-500\" />\n            )}\n          </button>\n        </div>\n\n        {/* Opacity Slider */}\n        {showOpacity && (\n          <div className=\"mt-4 space-y-1.5\">\n            <div className=\"flex justify-between text-xs\">\n              <span>Opacity</span>\n              <span>{opacity}%</span>\n            </div>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              value={opacity}\n              onChange={(e) => updateOpacity(Number(e.target.value))}\n              className={cn(\n                \"w-full h-2 rounded-full appearance-none\",\n                \"bg-linear-to-r from-transparent to-current cursor-pointer\"\n              )}\n              style={{ color }}\n            />\n          </div>\n        )}\n\n        {/* Color Swatches */}\n        <div className=\"mt-4 space-y-1.5\">\n          <div className=\"text-xs font-medium text-zinc-600 dark:text-zinc-400\">Swatches</div>\n          <div className=\"grid grid-cols-6 gap-1\">\n            {swatches.map((swatch) => (\n              <button\n                type=\"button\"\n                key={swatch}\n                onClick={() => updateFinalColor(swatch)}\n                className={cn(\n                  \"w-6 h-6 rounded-md border border-zinc-200 dark:border-zinc-700\",\n                  \"transition-transform hover:scale-110 relative\"\n                )}\n                style={{ backgroundColor: swatch }}\n              >\n                {color === swatch && (\n                  <Check\n                    className={cn(\n                      \"w-4 h-4 absolute inset-0 m-auto text-white\",\n                      \"drop-shadow-[0_1px_1px_rgba(0,0,0,0.5)]\"\n                    )}\n                  />\n                )}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "path": "/components/ruixenui/input/input-08.tsx",
      "target": "/components/ruixenui/input-08.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import * as React from \"react\";\n\nexport function useCopyToClipboard({\n    timeout = 2000,\n    onCopy,\n}: {\n    timeout?: number;\n    onCopy?: () => void;\n} = {}) {\n    const [isCopied, setIsCopied] = React.useState(false);\n\n    const copyToClipboard = (value: string) => {\n        if (typeof window === \"undefined\" || !navigator.clipboard.writeText) {\n            return;\n        }\n\n        if (!value) return;\n\n        navigator.clipboard.writeText(value).then(() => {\n            setIsCopied(true);\n\n            if (onCopy) {\n                onCopy();\n            }\n\n            setTimeout(() => {\n                setIsCopied(false);\n            }, timeout);\n        }, console.error);\n    };\n\n    return { isCopied, copyToClipboard };\n}\n",
      "path": "/hooks/use-copy-to-clipboard.ts",
      "target": "/hooks/use-copy-to-clipboard.ts"
    }
  ]
}