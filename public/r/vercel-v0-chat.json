{
  "name": "vercel-v0-chat",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "textarea"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\nimport {\n    ImageIcon,\n    FileUp,\n    Figma,\n    MonitorIcon,\n    CircleUserRound,\n    ArrowUpIcon,\n    Paperclip,\n    PlusIcon,\n} from \"lucide-react\";\n\nexport function VercelV0Chat() {\n    const [value, setValue] = useState(\"\");\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n        minHeight: 60,\n        maxHeight: 200,\n    });\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            if (value.trim()) {\n                setValue(\"\");\n                adjustHeight(true);\n            }\n        }\n    };\n\n    return (\n        <div className=\"flex flex-col items-center w-full max-w-4xl mx-auto p-4 space-y-4 sm:space-y-8\">\n            <h1 className=\"text-2xl sm:text-4xl font-bold text-black dark:text-white text-center\">\n                What can I help you ship?\n            </h1>\n\n            <div className=\"w-full\">\n                <div className=\"relative bg-neutral-900 rounded-xl border border-neutral-800\">\n                    <div className=\"overflow-y-auto\">\n                        <Textarea\n                            ref={textareaRef}\n                            value={value}\n                            onChange={(e) => {\n                                setValue(e.target.value);\n                                adjustHeight();\n                            }}\n                            onKeyDown={handleKeyDown}\n                            placeholder=\"Ask v0 a question...\"\n                            className={cn(\n                                \"w-full px-4 py-3\",\n                                \"resize-none\",\n                                \"bg-transparent\",\n                                \"border-none\",\n                                \"text-white text-sm\",\n                                \"focus:outline-none\",\n                                \"focus-visible:ring-0 focus-visible:ring-offset-0\",\n                                \"placeholder:text-neutral-500 placeholder:text-sm\",\n                                \"min-h-[60px]\"\n                            )}\n                            style={{\n                                overflow: \"hidden\",\n                            }}\n                        />\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-3\">\n                        <div className=\"flex items-center gap-2\">\n                            <button\n                                type=\"button\"\n                                className=\"group p-2 hover:bg-neutral-800 rounded-lg transition-colors flex items-center gap-1\"\n                            >\n                                <Paperclip className=\"w-4 h-4 text-white\" />\n                                <span className=\"text-xs text-zinc-400 hidden group-hover:inline transition-opacity\">\n                                    Attach\n                                </span>\n                            </button>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                            <button\n                                type=\"button\"\n                                className=\"px-2 py-1 rounded-lg text-sm text-zinc-400 transition-colors border border-dashed border-zinc-700 hover:border-zinc-600 hover:bg-zinc-800 flex items-center justify-between gap-1\"\n                            >\n                                <PlusIcon className=\"w-4 h-4\" />\n                                Project\n                            </button>\n                            <button\n                                type=\"button\"\n                                className={cn(\n                                    \"px-1.5 py-1.5 rounded-lg text-sm transition-colors border border-zinc-700 hover:border-zinc-600 hover:bg-zinc-800 flex items-center justify-between gap-1\",\n                                    value.trim()\n                                        ? \"bg-white text-black\"\n                                        : \"text-zinc-400\"\n                                )}\n                            >\n                                <ArrowUpIcon\n                                    className={cn(\n                                        \"w-4 h-4\",\n                                        value.trim()\n                                            ? \"text-black\"\n                                            : \"text-zinc-400\"\n                                    )}\n                                />\n                                <span className=\"sr-only\">Send</span>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"mt-4 -mx-4 px-4 sm:mx-0 sm:px-0\">\n                    <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-3 sm:overflow-x-auto sm:pb-2 sm:justify-center scrollbar-hide\">\n                        <ActionButton\n                            icon={<ImageIcon className=\"w-4 h-4\" />}\n                            label=\"Clone a Screenshot\"\n                        />\n                        <ActionButton\n                            icon={<Figma className=\"w-4 h-4\" />}\n                            label=\"Import from Figma\"\n                        />\n                        <ActionButton\n                            icon={<FileUp className=\"w-4 h-4\" />}\n                            label=\"Upload a Project\"\n                        />\n                        <ActionButton\n                            icon={<MonitorIcon className=\"w-4 h-4\" />}\n                            label=\"Landing Page\"\n                        />\n                        <ActionButton\n                            icon={<CircleUserRound className=\"w-4 h-4\" />}\n                            label=\"Sign Up Form\"\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\ninterface ActionButtonProps {\n    icon: React.ReactNode;\n    label: string;\n}\n\nfunction ActionButton({ icon, label }: ActionButtonProps) {\n    return (\n        <button\n            type=\"button\"\n            className=\"flex items-center gap-2 w-full sm:w-auto px-3 sm:px-4 py-2 bg-neutral-900 hover:bg-neutral-800 rounded-full border border-neutral-800 text-neutral-400 hover:text-white transition-colors whitespace-nowrap flex-shrink-0\"\n        >\n            {icon}\n            <span className=\"text-xs\">{label}</span>\n        </button>\n    );\n}\n\nexport default VercelV0Chat;\n",
      "path": "/components/ruixenui/vercel-v0-chat.tsx",
      "target": "/components/ruixenui/vercel-v0-chat.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, useRef, useCallback } from \"react\";\n\ninterface UseAutoResizeTextareaProps {\n    minHeight: number;\n    maxHeight?: number;\n}\n\nexport function useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n}: UseAutoResizeTextareaProps) {\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const adjustHeight = useCallback(\n        (reset?: boolean) => {\n            const textarea = textareaRef.current;\n            if (!textarea) return;\n\n            if (reset) {\n                textarea.style.height = `${minHeight}px`;\n                return;\n            }\n\n            // Temporarily shrink to get the right scrollHeight\n            textarea.style.height = `${minHeight}px`;\n\n            // Calculate new height\n            const newHeight = Math.max(\n                minHeight,\n                Math.min(\n                    textarea.scrollHeight,\n                    maxHeight ?? Number.POSITIVE_INFINITY\n                )\n            );\n\n            textarea.style.height = `${newHeight}px`;\n        },\n        [minHeight, maxHeight]\n    );\n\n    useEffect(() => {\n        // Set initial height\n        const textarea = textareaRef.current;\n        if (textarea) {\n            textarea.style.height = `${minHeight}px`;\n        }\n    }, [minHeight]);\n\n    // Adjust height on window resize\n    useEffect(() => {\n        const handleResize = () => adjustHeight();\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, [adjustHeight]);\n\n    return { textareaRef, adjustHeight };\n}\n",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}