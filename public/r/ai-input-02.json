{
  "name": "ai-input-02",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { CornerRightUp, FileUp, Paperclip, X } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport { useFileInput } from \"@/hooks/use-file-input\";\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\n\ninterface FileDisplayProps {\n    fileName: string;\n    onClear: () => void;\n}\n\nconst FileDisplay = ({ fileName, onClear }: FileDisplayProps) => (\n    <div className=\"flex items-center gap-2 bg-black/5 dark:bg-white/5 w-fit px-3 py-1 rounded-lg group border dark:border-white/10\">\n        <FileUp className=\"w-4 h-4 dark:text-white\" />\n        <span className=\"text-sm dark:text-white\">{fileName}</span>\n        <button\n            type=\"button\"\n            onClick={onClear}\n            className=\"ml-1 p-0.5 rounded-full hover:bg-black/10 dark:hover:bg-white/10 transition-colors\"\n        >\n            <X className=\"w-3 h-3 dark:text-white\" />\n        </button>\n    </div>\n);\n\nexport default function AIInput_02() {\n    const [inputValue, setInputValue] = useState<string>(\"\");\n    const { fileName, fileInputRef, handleFileSelect, clearFile } =\n        useFileInput({ accept: \"image/*\", maxSize: 5 });\n\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n        minHeight: 52,\n        maxHeight: 200,\n    });\n\n    return (\n        <div className=\"w-full py-2 sm:py-4 px-2 sm:px-0\">\n            <div className=\"relative max-w-xl w-full mx-auto flex flex-col gap-2\">\n                {fileName && (\n                    <FileDisplay fileName={fileName} onClear={clearFile} />\n                )}\n\n                <div className=\"relative\">\n                    <div\n                        className=\"absolute left-2 sm:left-3 top-1/2 -translate-y-1/2 flex items-center justify-center h-7 sm:h-8 w-7 sm:w-8 rounded-lg bg-black/5 dark:bg-white/5 hover:cursor-pointer\"\n                        onClick={() => fileInputRef.current?.click()}\n                    >\n                        <Paperclip className=\"w-3.5 sm:w-4 h-3.5 sm:h-4 transition-opacity transform scale-x-[-1] rotate-45 dark:text-white\" />\n                    </div>\n\n                    <input\n                        type=\"file\"\n                        className=\"hidden\"\n                        ref={fileInputRef}\n                        onChange={handleFileSelect}\n                    />\n\n                    <Textarea\n                        id=\"ai-input-02\"\n                        placeholder=\"File Upload and Chat!\"\n                        className={cn(\n                            \"max-w-xl bg-black/5 dark:bg-white/5 w-full rounded-2xl sm:rounded-3xl pl-10 sm:pl-12 pr-12 sm:pr-16\",\n                            \"placeholder:text-black/70 dark:placeholder:text-white/70\",\n                            \"border-none ring-black/30 dark:ring-white/30\",\n                            \"text-black dark:text-white text-wrap py-3 sm:py-4\",\n                            \"text-sm sm:text-base\",\n                            \"max-h-[200px] overflow-y-auto resize-none leading-[1.2]\",\n                            \"min-h-[52px]\",\n                            \"max-h-[200px]\"\n                        )}\n                        ref={textareaRef}\n                        value={inputValue}\n                        onChange={(e) => {\n                            setInputValue(e.target.value);\n                            adjustHeight();\n                        }}\n                        onKeyDown={(e) => {\n                            if (e.key === \"Enter\" && !e.shiftKey) {\n                                e.preventDefault();\n                                setInputValue(\"\");\n                                adjustHeight(true);\n                            }\n                        }}\n                    />\n\n                    <button\n                        className=\"absolute right-2 sm:right-3 top-1/2 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 py-1 px-1\"\n                        type=\"button\"\n                    >\n                        <CornerRightUp\n                            className={cn(\n                                \"w-3.5 sm:w-4 h-3.5 sm:h-4 transition-opacity dark:text-white\",\n                                inputValue ? \"opacity-100\" : \"opacity-30\"\n                            )}\n                        />\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n",
      "path": "/components/ruixenui/ai-input/ai-input-02.tsx",
      "target": "/components/ruixenui/ai-input-02.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useState, useRef } from \"react\";\n\ninterface UseFileInputOptions {\n    accept?: string;\n    maxSize?: number;\n}\n\nexport function useFileInput({ accept, maxSize }: UseFileInputOptions) {\n    const [fileName, setFileName] = useState<string>(\"\");\n    const [error, setError] = useState<string>(\"\");\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const [fileSize, setFileSize] = useState<number>(0);\n\n    const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files?.[0];\n        validateAndSetFile(file);\n    };\n\n    const validateAndSetFile = (file: File | undefined) => {\n        setError(\"\");\n\n        if (file) {\n            if (maxSize && file.size > maxSize * 1024 * 1024) {\n                setError(`File size must be less than ${maxSize}MB`);\n                return;\n            }\n\n            if (\n                accept &&\n                !file.type.match(accept.replace(\"/*\", \"/\"))\n            ) {\n                setError(`File type must be ${accept}`);\n                return;\n            }\n\n            setFileSize(file.size);\n            setFileName(file.name);\n        }\n    };\n\n    const clearFile = () => {\n        setFileName(\"\");\n        setError(\"\");\n        setFileSize(0);\n        if (fileInputRef.current) {\n            fileInputRef.current.value = \"\";\n        }\n    };\n\n    return {\n        fileName,\n        error,\n        fileInputRef,\n        handleFileSelect,\n        validateAndSetFile,\n        clearFile,\n        fileSize,\n    };\n}\n",
      "path": "/hooks/use-file-input.ts",
      "target": "/hooks/use-file-input.ts"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, useRef, useCallback } from \"react\";\n\ninterface UseAutoResizeTextareaProps {\n    minHeight: number;\n    maxHeight?: number;\n}\n\nexport function useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n}: UseAutoResizeTextareaProps) {\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const adjustHeight = useCallback(\n        (reset?: boolean) => {\n            const textarea = textareaRef.current;\n            if (!textarea) return;\n\n            if (reset) {\n                textarea.style.height = `${minHeight}px`;\n                return;\n            }\n\n            // Temporarily shrink to get the right scrollHeight\n            textarea.style.height = `${minHeight}px`;\n\n            // Calculate new height\n            const newHeight = Math.max(\n                minHeight,\n                Math.min(\n                    textarea.scrollHeight,\n                    maxHeight ?? Number.POSITIVE_INFINITY\n                )\n            );\n\n            textarea.style.height = `${newHeight}px`;\n        },\n        [minHeight, maxHeight]\n    );\n\n    useEffect(() => {\n        // Set initial height\n        const textarea = textareaRef.current;\n        if (textarea) {\n            textarea.style.height = `${minHeight}px`;\n        }\n    }, [minHeight]);\n\n    // Adjust height on window resize\n    useEffect(() => {\n        const handleResize = () => adjustHeight();\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, [adjustHeight]);\n\n    return { textareaRef, adjustHeight };\n}\n",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}