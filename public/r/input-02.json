{
  "name": "input-02",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState, useRef, type RefObject } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { X, Check, Plus } from \"lucide-react\";\nimport { useTags } from \"@/hooks/use-tags\";\nimport { useClickOutside } from \"@/hooks/use-click-outside\";\n\ninterface Tag {\n    id: string;\n    label: string;\n    color?: string;\n}\n\ninterface TagInputProps {\n    onChange?: (tags: Tag[]) => void;\n    defaultTags?: Tag[];\n    suggestions?: Tag[];\n    maxTags?: number;\n    label?: string;\n    placeholder?: string;\n    error?: string;\n}\nconst defaultKokonutTag: Tag = {\n    id: \"kokonut-ui\",\n    label: \"RuixenUI\",\n    color: \"bg-indigo-100 text-indigo-700 border border-indigo-200 dark:bg-indigo-900/30 dark:text-indigo-300 dark:border-indigo-700/30\",\n};\n\nconst tagStyles = {\n    base: \"inline-flex items-center gap-1.5 px-2 py-0.5 text-sm rounded-md transition-colors duration-150\",\n    colors: {\n        blue: \"bg-blue-50 text-blue-700 border border-blue-200 hover:border-blue-300 dark:bg-blue-900/30 dark:text-blue-300 dark:border-blue-700/30 dark:hover:border-blue-600/50\",\n        purple: \"bg-purple-50 text-purple-700 border border-purple-200 hover:border-purple-300 dark:bg-purple-900/30 dark:text-purple-300 dark:border-purple-700/30 dark:hover:border-purple-600/50\",\n        green: \"bg-green-50 text-green-700 border border-green-200 hover:border-green-300 dark:bg-green-900/30 dark:text-green-300 dark:border-green-700/30 dark:hover:border-green-600/50\",\n    },\n};\n\nexport default function Input_02({\n    onChange,\n    defaultTags = [defaultKokonutTag], // Set RuixenUI as default\n    suggestions = [\n        { id: \"nextjs\", label: \"Next.js\" },\n        { id: \"react\", label: \"React\" },\n        { id: \"tailwind\", label: \"Tailwind\" },\n    ],\n    maxTags = 10,\n    label = \"Tags\",\n    placeholder = \"Add tags...\",\n    error,\n}: TagInputProps) {\n    const { tags, addTag, removeTag, removeLastTag } = useTags({\n        onChange,\n        defaultTags,\n        maxTags,\n    });\n    const [input, setInput] = useState(\"\");\n    const [isOpen, setIsOpen] = useState(false);\n    const [selectedIndex, setSelectedIndex] = useState(0);\n    const inputRef = useRef<HTMLInputElement>(null);\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    const filteredSuggestions = suggestions\n        .filter(\n            (suggestion) =>\n                suggestion.label.toLowerCase().includes(input.toLowerCase()) &&\n                !tags.find((tag) => tag.id === suggestion.id)\n        )\n        .slice(0, 5);\n\n    const canAddNewTag =\n        !suggestions.find(\n            (s) => s.label.toLowerCase() === input.toLowerCase()\n        ) && input.length > 0;\n\n    function handleKeyDown(e: React.KeyboardEvent) {\n        if (e.key === \"Backspace\" && input === \"\" && tags.length > 0) {\n            removeLastTag();\n        } else if (e.key === \"Enter\" && input) {\n            e.preventDefault();\n            if (isOpen && filteredSuggestions[selectedIndex]) {\n                addTag(filteredSuggestions[selectedIndex]);\n                setInput(\"\");\n                setIsOpen(false);\n            } else if (canAddNewTag) {\n                addTag({ id: input, label: input });\n                setInput(\"\");\n                setIsOpen(false);\n            }\n        } else if (e.key === \"Escape\") {\n            setIsOpen(false);\n        }\n    }\n\n    useClickOutside(containerRef as RefObject<HTMLElement>, () =>\n        setIsOpen(false)\n    );\n\n    return (\n        <div\n            className=\"w-full max-w-full sm:max-w-2xl space-y-2\"\n            ref={containerRef}\n        >\n            {label && (\n                <label\n                    className=\"text-sm font-medium text-zinc-800 dark:text-zinc-200\"\n                    htmlFor={label}\n                >\n                    {label}\n                </label>\n            )}\n\n            <div\n                className={cn(\n                    \"min-h-[3rem] sm:min-h-[2.5rem] p-2 sm:p-1.5\",\n                    \"rounded-lg border\",\n                    \"border-zinc-300 dark:border-zinc-700\",\n                    \"bg-white dark:bg-zinc-900\",\n                    \"focus-within:ring-2 focus-within:ring-indigo-500/30 dark:focus-within:ring-indigo-400/30\",\n                    \"flex items-center flex-row flex-wrap gap-2 sm:gap-1.5 relative\"\n                )}\n            >\n                {tags.map((tag) => (\n                    <span\n                        key={tag.id}\n                        className={cn(\n                            tagStyles.base,\n                            \"text-base sm:text-sm py-1 sm:py-0.5\",\n                            tag.color || tagStyles.colors.blue\n                        )}\n                    >\n                        {tag.label}\n                        <button\n                            type=\"button\"\n                            onClick={() => removeTag(tag.id)}\n                            className={cn(\n                                \"text-current/60 hover:text-current transition-colors\",\n                                \"p-1 sm:p-0\"\n                            )}\n                        >\n                            <X className=\"w-4 h-4 sm:w-3.5 sm:h-3.5\" />\n                        </button>\n                    </span>\n                ))}\n\n                <input\n                    ref={inputRef}\n                    type=\"text\"\n                    value={input}\n                    onChange={(e) => {\n                        setInput(e.target.value);\n                        setIsOpen(true);\n                        setSelectedIndex(0);\n                    }}\n                    onFocus={() => setIsOpen(true)}\n                    onKeyDown={handleKeyDown}\n                    placeholder={tags.length === 0 ? placeholder : \"\"}\n                    className={cn(\n                        \"flex-1 min-w-[140px] sm:min-w-[120px] bg-transparent\",\n                        \"h-8 sm:h-7\",\n                        \"text-base sm:text-sm\",\n                        \"text-zinc-900 dark:text-zinc-100\",\n                        \"placeholder:text-zinc-500 dark:placeholder:text-zinc-400\",\n                        \"focus:outline-hidden\"\n                    )}\n                />\n\n                {isOpen && (input || filteredSuggestions.length > 0) && (\n                    <div\n                        className={cn(\n                            \"absolute left-0 right-0 top-full mt-1 z-50\",\n                            \"max-h-[60vh] sm:max-h-[300px] overflow-y-auto\",\n                            \"bg-white dark:bg-zinc-900\",\n                            \"border border-zinc-300 dark:border-zinc-700\",\n                            \"rounded-lg shadow-lg dark:shadow-zinc-950/50\",\n                            \"overflow-hidden\"\n                        )}\n                    >\n                        <div className=\"px-2 py-1.5 border-b border-zinc-200 dark:border-zinc-800\">\n                            <span className=\"text-xs font-medium text-zinc-600 dark:text-zinc-300\">\n                                Choose a tag or create one\n                            </span>\n                        </div>\n                        <div className=\"p-2 sm:p-1.5 flex flex-wrap gap-2 sm:gap-1.5\">\n                            {filteredSuggestions.map((suggestion, index) => (\n                                <button\n                                    type=\"button\"\n                                    key={suggestion.id}\n                                    onClick={() => {\n                                        addTag(suggestion);\n                                        setInput(\"\");\n                                        setIsOpen(false);\n                                    }}\n                                    className={cn(\n                                        tagStyles.base,\n                                        selectedIndex === index\n                                            ? tagStyles.colors.blue\n                                            : \"bg-zinc-50 text-zinc-700 border border-zinc-300 hover:border-zinc-400 dark:bg-zinc-800/50 dark:text-zinc-300 dark:border-zinc-700 dark:hover:border-zinc-600\"\n                                    )}\n                                >\n                                    {suggestion.label}\n                                    {selectedIndex === index && (\n                                        <Check className=\"w-3.5 h-3.5\" />\n                                    )}\n                                </button>\n                            ))}\n                            {canAddNewTag && (\n                                <button\n                                    type=\"button\"\n                                    onClick={() => {\n                                        const colorKeys = Object.keys(\n                                            tagStyles.colors\n                                        ) as Array<\n                                            keyof typeof tagStyles.colors\n                                        >;\n                                        const randomColor =\n                                            tagStyles.colors[\n                                                colorKeys[\n                                                    Math.floor(\n                                                        Math.random() *\n                                                            colorKeys.length\n                                                    )\n                                                ]\n                                            ];\n                                        addTag({\n                                            id: input,\n                                            label: input,\n                                            color: randomColor,\n                                        });\n                                        setInput(\"\");\n                                        setIsOpen(false);\n                                    }}\n                                    className={cn(\n                                        tagStyles.base,\n                                        selectedIndex ===\n                                            filteredSuggestions.length\n                                            ? tagStyles.colors.blue\n                                            : \"bg-zinc-50 text-zinc-700 border border-zinc-300 hover:border-zinc-400 dark:bg-zinc-800/50 dark:text-zinc-300 dark:border-zinc-700 dark:hover:border-zinc-600\"\n                                    )}\n                                >\n                                    <Plus className=\"w-3.5 h-3.5\" />\n                                    Create \"{input}\"\n                                </button>\n                            )}\n                        </div>\n                    </div>\n                )}\n            </div>\n\n            {error && (\n                <p className=\"text-sm text-red-600 dark:text-red-400\">\n                    {error}\n                </p>\n            )}\n        </div>\n    );\n}\n",
      "path": "/components/ruixenui/input/input-02.tsx",
      "target": "/components/ruixenui/input-02.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useState } from \"react\";\n\ninterface Tag {\n    id: string;\n    label: string;\n    color?: string;\n}\n\ninterface UseTagsProps {\n    onChange?: (tags: Tag[]) => void;\n    defaultTags?: Tag[];\n    maxTags?: number;\n    defaultColors?: string[];\n}\n\nexport function useTags({\n    onChange,\n    defaultTags = [],\n    maxTags = 10,\n    defaultColors = [\n        \"bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300\",\n        \"bg-purple-100 text-purple-700 dark:bg-purple-900/30 dark:text-purple-300\",\n        \"bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300\",\n        \"bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-300\",\n        \"bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300\",\n    ],\n}: UseTagsProps = {}) {\n    const [tags, setTags] = useState<Tag[]>(defaultTags);\n\n    function addTag(tag: Tag) {\n        if (tags.length >= maxTags) return;\n\n        const newTags = [\n            ...tags,\n            {\n                ...tag,\n                color:\n                    tag.color ||\n                    defaultColors[tags.length % defaultColors.length],\n            },\n        ];\n        setTags(newTags);\n        onChange?.(newTags);\n        return newTags;\n    }\n\n    function removeTag(tagId: string) {\n        const newTags = tags.filter((t) => t.id !== tagId);\n        setTags(newTags);\n        onChange?.(newTags);\n        return newTags;\n    }\n\n    function removeLastTag() {\n        if (tags.length === 0) return;\n        return removeTag(tags[tags.length - 1].id);\n    }\n\n    return {\n        tags,\n        setTags,\n        addTag,\n        removeTag,\n        removeLastTag,\n        hasReachedMax: tags.length >= maxTags,\n    };\n}\n",
      "path": "/hooks/use-tags.ts",
      "target": "/hooks/use-tags.ts"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, type RefObject } from \"react\";\n\nexport function useClickOutside(\n    ref: RefObject<HTMLElement>,\n    handler: () => void\n) {\n    useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            if (ref.current && !ref.current.contains(event.target as Node)) {\n                handler();\n            }\n        };\n\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () =>\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n    }, [ref, handler]);\n}\n",
      "path": "/hooks/use-click-outside.ts",
      "target": "/hooks/use-click-outside.ts"
    }
  ]
}