{
  "name": "input-07",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState, useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Search, X, SlidersHorizontal, Check, Calendar } from \"lucide-react\";\nimport { useClickOutside } from \"@/hooks/use-click-outside\";\n\ninterface FilterOption {\n    id: string;\n    label: string;\n    type: \"select\" | \"date\" | \"boolean\";\n    options?: { value: string; label: string }[];\n}\n\ninterface SearchInputProps {\n    placeholder?: string;\n    filters?: FilterOption[];\n}\n\nconst defaultFilters: FilterOption[] = [\n    {\n        id: \"status\",\n        label: \"Status\",\n        type: \"select\",\n        options: [\n            { value: \"active\", label: \"Active\" },\n            { value: \"archived\", label: \"Archived\" },\n            { value: \"draft\", label: \"Draft\" },\n        ],\n    },\n    {\n        id: \"date\",\n        label: \"Created Date\",\n        type: \"date\",\n    },\n    {\n        id: \"verified\",\n        label: \"Verified Only\",\n        type: \"boolean\",\n    },\n];\n\nexport default function Input_07({ filters = defaultFilters }: SearchInputProps) {\n    const [showFilters, setShowFilters] = useState(false);\n    const [activeFilters, setActiveFilters] = useState<Record<string, any>>({\n        verified: true,\n    });\n    const filterRef = useRef<HTMLDivElement>(null);\n\n    useClickOutside(filterRef, () => setShowFilters(false));\n\n    const updateFilter = (id: string, value: any) => {\n        setActiveFilters((prev) => {\n            if (value === undefined || value === \"\") {\n                const newFilters = { ...prev };\n                delete newFilters[id];\n                return newFilters;\n            }\n            return { ...prev, [id]: value };\n        });\n    };\n\n    const getActiveFilterCount = () => {\n        return Object.keys(activeFilters).length;\n    };\n\n    return (\n        <div className=\"w-full max-w-2xl relative z-0\">\n            <div className=\"relative\">\n                <div className=\"relative flex items-center\">\n                    <Search className=\"absolute left-3 w-4 h-4 text-zinc-400\" />\n                    <input\n                        type=\"text\"\n                        placeholder=\"Search with filters\"\n                        className={cn(\n                            \"w-full pl-10 pr-20 py-2\",\n                            \"rounded-lg border border-zinc-200 dark:border-zinc-800\",\n                            \"bg-white dark:bg-zinc-900\",\n                            \"focus:outline-none focus:ring-2 focus:ring-indigo-500/20\",\n                            \"placeholder:text-zinc-400 dark:placeholder:text-zinc-600\"\n                        )}\n                    />\n                    <div className=\"absolute right-2 flex items-center gap-1\">\n                        <button\n                            type=\"button\"\n                            onClick={() => setShowFilters(!showFilters)}\n                            className={cn(\n                                \"p-1.5 rounded flex items-center gap-1\",\n                                \"text-sm font-medium\",\n                                showFilters\n                                    ? \"bg-indigo-50 text-indigo-600 dark:bg-indigo-500/10 dark:text-indigo-400\"\n                                    : \"hover:bg-zinc-100 dark:hover:bg-zinc-800 text-zinc-600 dark:text-zinc-400\"\n                            )}\n                        >\n                            <SlidersHorizontal className=\"w-4 h-4\" />\n                            {getActiveFilterCount() > 0 && (\n                                <span className=\"min-w-[20px] px-1 py-0.5 rounded-full bg-indigo-100 dark:bg-indigo-500/20 text-xs\">\n                                    {getActiveFilterCount()}\n                                </span>\n                            )}\n                        </button>\n                    </div>\n                </div>\n\n                {showFilters && (\n                    <div\n                        ref={filterRef}\n                        className={cn(\n                            \"absolute right-0 bottom-full mb-2 w-72 p-4\",\n                            \"bg-white dark:bg-zinc-900\",\n                            \"border border-zinc-200 dark:border-zinc-800\",\n                            \"rounded-lg shadow-lg\"\n                        )}\n                    >\n                        <fieldset>\n                            <div className=\"flex items-center justify-between\">\n                                <legend className=\"font-medium\">Filters</legend>\n                                {getActiveFilterCount() > 0 && (\n                                    <button\n                                        type=\"button\"\n                                        onClick={() =>\n                                            setActiveFilters({ verified: true })\n                                        }\n                                        className=\"text-sm text-zinc-500 hover:text-zinc-700 dark:hover:text-zinc-300\"\n                                    >\n                                        Reset\n                                    </button>\n                                )}\n                            </div>\n\n                            <div className=\"space-y-3 mt-4\">\n                                {filters.map((filter) => (\n                                    <div key={filter.id} className=\"space-y-1\">\n                                        {filter.type === \"select\" && (\n                                            <div className=\"relative\">\n                                                <label\n                                                    htmlFor={`filter-${filter.id}`}\n                                                    className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\"\n                                                >\n                                                    {filter.label}\n                                                </label>\n                                                <select\n                                                    id={`filter-${filter.id}`}\n                                                    value={\n                                                        activeFilters[\n                                                            filter.id\n                                                        ] || \"\"\n                                                    }\n                                                    onChange={(e) =>\n                                                        updateFilter(\n                                                            filter.id,\n                                                            e.target.value\n                                                        )\n                                                    }\n                                                    className={cn(\n                                                        \"w-full pl-3 pr-8 py-1.5\",\n                                                        \"rounded-md border border-zinc-200 dark:border-zinc-800\",\n                                                        \"bg-white dark:bg-zinc-900\",\n                                                        \"text-sm text-zinc-900 dark:text-zinc-100\",\n                                                        \"focus:outline-none focus:ring-2 focus:ring-indigo-500/20\"\n                                                    )}\n                                                >\n                                                    <option value=\"\">\n                                                        Any\n                                                    </option>\n                                                    {filter.options?.map(\n                                                        (option) => (\n                                                            <option\n                                                                key={\n                                                                    option.value\n                                                                }\n                                                                value={\n                                                                    option.value\n                                                                }\n                                                            >\n                                                                {option.label}\n                                                            </option>\n                                                        )\n                                                    )}\n                                                </select>\n                                            </div>\n                                        )}\n\n                                        {filter.type === \"date\" && (\n                                            <div className=\"relative\">\n                                                <label\n                                                    htmlFor={`filter-${filter.id}`}\n                                                    className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\"\n                                                >\n                                                    {filter.label}\n                                                </label>\n                                                <input\n                                                    id={`filter-${filter.id}`}\n                                                    type=\"date\"\n                                                    value={\n                                                        activeFilters[\n                                                            filter.id\n                                                        ] || \"\"\n                                                    }\n                                                    onChange={(e) =>\n                                                        updateFilter(\n                                                            filter.id,\n                                                            e.target.value\n                                                        )\n                                                    }\n                                                    className={cn(\n                                                        \"w-full pl-3 pr-8 py-1.5\",\n                                                        \"rounded-md border border-zinc-200 dark:border-zinc-800\",\n                                                        \"bg-white dark:bg-zinc-900\",\n                                                        \"text-sm text-zinc-900 dark:text-zinc-100\",\n                                                        \"focus:outline-none focus:ring-2 focus:ring-indigo-500/20\"\n                                                    )}\n                                                />\n                                                <Calendar className=\"absolute right-2 top-1/2 -translate-y-1/2 w-4 h-4 text-zinc-400\" />\n                                            </div>\n                                        )}\n\n                                        {filter.type === \"boolean\" && (\n                                            <fieldset>\n                                                <span\n                                                    id={`filter-${filter.id}-label`}\n                                                    className=\"sr-only\"\n                                                >\n                                                    {filter.label}\n                                                </span>\n                                                <button\n                                                    type=\"button\"\n                                                    onClick={() =>\n                                                        updateFilter(\n                                                            filter.id,\n                                                            !activeFilters[\n                                                                filter.id\n                                                            ]\n                                                        )\n                                                    }\n                                                    className={cn(\n                                                        \"flex items-center gap-2 px-3 py-1.5 w-full\",\n                                                        \"rounded-md border text-sm\",\n                                                        \"transition-colors duration-150\",\n                                                        activeFilters[filter.id]\n                                                            ? \"border-indigo-500 bg-indigo-50 text-indigo-600 dark:bg-indigo-500/10 dark:text-indigo-400\"\n                                                            : \"border-zinc-200 dark:border-zinc-800 hover:bg-zinc-50 dark:hover:bg-zinc-800\"\n                                                    )}\n                                                    aria-pressed={\n                                                        activeFilters[filter.id]\n                                                    }\n                                                >\n                                                    {activeFilters[\n                                                        filter.id\n                                                    ] && (\n                                                        <Check className=\"w-4 h-4\" />\n                                                    )}\n                                                    {filter.label}\n                                                </button>\n                                            </fieldset>\n                                        )}\n                                    </div>\n                                ))}\n                            </div>\n                        </fieldset>\n                    </div>\n                )}\n            </div>\n\n            {getActiveFilterCount() > 0 && (\n                <div className=\"mt-2 flex flex-wrap gap-2\">\n                    {Object.entries(activeFilters).map(([key, value]) => {\n                        const filter = filters.find((f) => f.id === key);\n                        let label = \"\";\n                        if (filter?.type === \"select\") {\n                            label =\n                                filter.options?.find((o) => o.value === value)\n                                    ?.label || value;\n                        } else if (filter?.type === \"boolean\") {\n                            label = filter.label;\n                        } else {\n                            label = `${filter?.label}: ${value}`;\n                        }\n\n                        return (\n                            <span\n                                key={key}\n                                className={cn(\n                                    \"inline-flex items-center gap-1 px-2 py-1\",\n                                    \"rounded-md text-sm\",\n                                    \"bg-indigo-50 text-indigo-700 dark:bg-indigo-500/10 dark:text-indigo-400\"\n                                )}\n                            >\n                                {label}\n                                <button\n                                    type=\"button\"\n                                    onClick={() => updateFilter(key, undefined)}\n                                    className=\"hover:text-indigo-900 dark:hover:text-indigo-200\"\n                                >\n                                    <X className=\"w-3 h-3\" />\n                                </button>\n                            </span>\n                        );\n                    })}\n                </div>\n            )}\n        </div>\n    );\n}\n",
      "path": "/components/ruixenui/input/input-07.tsx",
      "target": "/components/ruixenui/input-07.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, type RefObject } from \"react\";\n\nexport function useClickOutside(\n    ref: RefObject<HTMLElement>,\n    handler: () => void\n) {\n    useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            if (ref.current && !ref.current.contains(event.target as Node)) {\n                handler();\n            }\n        };\n\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () =>\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n    }, [ref, handler]);\n}\n",
      "path": "/hooks/use-click-outside.ts",
      "target": "/hooks/use-click-outside.ts"
    }
  ]
}