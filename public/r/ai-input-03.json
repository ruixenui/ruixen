{
  "name": "ai-input-03",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport {\n    Text,\n    CheckCheck,\n    ArrowDownWideNarrow,\n    CornerRightDown,\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\n\nconst ITEMS = [\n    {\n        text: \"Summary\",\n        icon: Text,\n        colors: {\n            icon: \"text-orange-600\",\n            border: \"border-orange-500\",\n            bg: \"bg-orange-100\",\n        },\n    },\n    {\n        text: \"Fix Spelling and Grammar\",\n        icon: CheckCheck,\n        colors: {\n            icon: \"text-emerald-600\",\n            border: \"border-emerald-500\",\n            bg: \"bg-emerald-100\",\n        },\n    },\n    {\n        text: \"Make shorter\",\n        icon: ArrowDownWideNarrow,\n        colors: {\n            icon: \"text-purple-600\",\n            border: \"border-purple-500\",\n            bg: \"bg-purple-100\",\n        },\n    },\n];\n\nexport default function AIInput_03() {\n    const [inputValue, setInputValue] = useState(\"\");\n    const [selectedItem, setSelectedItem] = useState<string | null>(\n        \"Make shorter\"\n    );\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n        minHeight: 52,\n        maxHeight: 200,\n    });\n\n    const toggleItem = (itemText: string) => {\n        setSelectedItem((prev) => (prev === itemText ? null : itemText));\n    };\n\n    const currentItem = selectedItem\n        ? ITEMS.find((item) => item.text === selectedItem)\n        : null;\n\n    const handleSubmit = () => {\n        setInputValue(\"\");\n        setSelectedItem(null);\n        adjustHeight(true);\n    };\n\n    return (\n        <div className=\"w-full py-4\">\n            <div className=\"relative max-w-xl w-full mx-auto\">\n                <div className=\"relative border border-black/10 dark:border-white/10 focus-within:border-black/20 dark:focus-within:border-white/20 rounded-2xl bg-black/[0.03] dark:bg-white/[0.03]\">\n                    <div className=\"flex flex-col\">\n                        <div className=\"overflow-y-auto max-h-[200px]\">\n                            <Textarea\n                                ref={textareaRef}\n                                id=\"ai-input-03\"\n                                placeholder=\"Enter your text here...\"\n                                className={cn(\n                                    \"max-w-xl w-full rounded-2xl pr-10 pt-3 pb-3 placeholder:text-black/70 dark:placeholder:text-white/70 border-none focus:ring-3 text-black dark:text-white resize-none text-wrap bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 leading-[1.2]\",\n                                    \"min-h-[52px]\",\n                                    \"max-h-[200px]\"\n                                )}\n                                value={inputValue}\n                                onChange={(e) => {\n                                    setInputValue(e.target.value);\n                                    adjustHeight();\n                                }}\n                                onKeyDown={(e) => {\n                                    if (e.key === \"Enter\" && !e.shiftKey) {\n                                        e.preventDefault();\n                                        handleSubmit();\n                                    }\n                                }}\n                            />\n                        </div>\n\n                        <div className=\"h-12 bg-transparent\">\n                            {currentItem && (\n                                <div className=\"absolute left-3 bottom-3 z-10\">\n                                    <button\n                                        type=\"button\"\n                                        onClick={handleSubmit}\n                                        className={cn(\n                                            \"inline-flex items-center gap-1.5\",\n                                            \"border shadow-xs rounded-md px-2 py-0.5 text-xs font-medium\",\n                                            \"animate-fadeIn hover:bg-black/5 dark:hover:bg-white/5 transition-colors duration-200\",\n                                            currentItem.colors.bg,\n                                            currentItem.colors.border\n                                        )}\n                                    >\n                                        <currentItem.icon\n                                            className={`w-3.5 h-3.5 ${currentItem.colors.icon}`}\n                                        />\n                                        <span\n                                            className={currentItem.colors.icon}\n                                        >\n                                            {selectedItem}\n                                        </span>\n                                    </button>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n\n                    <CornerRightDown\n                        className={cn(\n                            \"absolute right-3 top-3 w-4 h-4 transition-all duration-200 dark:text-white\",\n                            inputValue\n                                ? \"opacity-100 scale-100\"\n                                : \"opacity-30 scale-95\"\n                        )}\n                    />\n                </div>\n            </div>\n            <div className=\"flex flex-wrap gap-1.5 mt-2 max-w-xl mx-auto justify-start px-4\">\n                {ITEMS.filter((item) => item.text !== selectedItem).map(\n                    ({ text, icon: Icon, colors }) => (\n                        <button\n                            type=\"button\"\n                            key={text}\n                            className={cn(\n                                \"px-3 py-1.5 text-xs font-medium rounded-full\",\n                                \"border transition-all duration-200\",\n                                \"border-black/10 dark:border-white/10 bg-white dark:bg-gray-900 hover:bg-black/5 dark:hover:bg-white/5\",\n                                \"shrink-0\"\n                            )}\n                            onClick={() => toggleItem(text)}\n                        >\n                            <div className=\"flex items-center gap-1.5\">\n                                <Icon className={cn(\"h-4 w-4\", colors.icon)} />\n                                <span className=\"text-black/70 dark:text-white/70 whitespace-nowrap\">\n                                    {text}\n                                </span>\n                            </div>\n                        </button>\n                    )\n                )}\n            </div>\n        </div>\n    );\n}\n",
      "path": "/components/ruixenui/ai-input/ai-input-03.tsx",
      "target": "/components/ruixenui/ai-input-03.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, useRef, useCallback } from \"react\";\n\ninterface UseAutoResizeTextareaProps {\n    minHeight: number;\n    maxHeight?: number;\n}\n\nexport function useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n}: UseAutoResizeTextareaProps) {\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const adjustHeight = useCallback(\n        (reset?: boolean) => {\n            const textarea = textareaRef.current;\n            if (!textarea) return;\n\n            if (reset) {\n                textarea.style.height = `${minHeight}px`;\n                return;\n            }\n\n            // Temporarily shrink to get the right scrollHeight\n            textarea.style.height = `${minHeight}px`;\n\n            // Calculate new height\n            const newHeight = Math.max(\n                minHeight,\n                Math.min(\n                    textarea.scrollHeight,\n                    maxHeight ?? Number.POSITIVE_INFINITY\n                )\n            );\n\n            textarea.style.height = `${newHeight}px`;\n        },\n        [minHeight, maxHeight]\n    );\n\n    useEffect(() => {\n        // Set initial height\n        const textarea = textareaRef.current;\n        if (textarea) {\n            textarea.style.height = `${minHeight}px`;\n        }\n    }, [minHeight]);\n\n    // Adjust height on window resize\n    useEffect(() => {\n        const handleResize = () => adjustHeight();\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, [adjustHeight]);\n\n    return { textareaRef, adjustHeight };\n}\n",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}