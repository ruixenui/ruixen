{
  "name": "ai-input-16",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState, useRef, useCallback, type RefObject } from \"react\";\nimport { Command } from \"cmdk\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { MessageSquare, Wand2, Search, SendHorizontal } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useClickOutside } from \"@/hooks/use-click-outside\";\n\nconst COMMANDS = [\n    {\n        id: \"chat\",\n        label: \"Chat\",\n        description: \"Start a conversation\",\n        icon: MessageSquare,\n        prefix: \"/chat\",\n    },\n    {\n        id: \"generate\",\n        label: \"Generate\",\n        description: \"Generate code or content\",\n        icon: Wand2,\n        prefix: \"/generate\",\n    },\n    {\n        id: \"analyze\",\n        label: \"Analyze\",\n        description: \"Analyze code or text\",\n        icon: Search,\n        prefix: \"/analyze\",\n    },\n];\n\nexport default function AIInput_16() {\n    const [isOpen, setIsOpen] = useState(false);\n    const [activeCommand, setActiveCommand] = useState<string | null>(null);\n    const inputRef = useRef<HTMLInputElement>(null);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [inputValue, setInputValue] = useState(\"\");\n\n    useClickOutside(containerRef as RefObject<HTMLElement>, () => {\n        if (isOpen) setIsOpen(false);\n    });\n\n    const handleKeyDown = useCallback(\n        (e: React.KeyboardEvent) => {\n            if (e.key === \"Enter\" && !e.shiftKey) {\n                e.preventDefault();\n                if (!inputValue.trim() && !activeCommand) return;\n\n                setInputValue(\"\");\n                setActiveCommand(null);\n            }\n\n            if (e.key === \"Backspace\" && inputValue === \"\" && activeCommand) {\n                setActiveCommand(null);\n            }\n        },\n        [activeCommand, inputValue]\n    );\n\n    const handleCommandSelect = (commandId: string) => {\n        const command = COMMANDS.find((cmd) => cmd.id === commandId);\n        if (command) {\n            setInputValue(\"\");\n            setActiveCommand(commandId);\n            setIsOpen(false);\n            inputRef.current?.focus();\n        }\n    };\n\n    const handleButtonClick = () => {\n        if (!inputValue.trim() && !activeCommand) return;\n        setInputValue(\"\");\n        setIsOpen(false);\n        setActiveCommand(null);\n    };\n\n    return (\n        <div className=\"w-full py-4 min-h-[244px]\">\n            <div className=\"relative\" ref={containerRef}>\n                <div className=\"relative rounded-lg bg-black/5 dark:bg-white/5\">\n                    <div className=\"flex items-center flex-wrap gap-2 px-3 h-auto min-h-[48px] py-2\">\n                        {activeCommand &&\n                            (() => {\n                                const activeCmd = COMMANDS.find(\n                                    (cmd) => cmd.id === activeCommand\n                                );\n                                if (!activeCmd) return null;\n\n                                return (\n                                    <div className=\"flex items-center gap-2 text-sm bg-black/10 dark:bg-white/10 px-2 py-1 rounded-md\">\n                                        <span className=\"flex items-center gap-1.5 shrink-0\">\n                                            <activeCmd.icon className=\"w-4 h-4 text-black/50 dark:text-white/50\" />\n                                            <span className=\"text-black/70 dark:text-white/70\">\n                                                {activeCmd.label}\n                                            </span>\n                                        </span>\n                                    </div>\n                                );\n                            })()}\n                        <div className=\"flex-1 flex items-center gap-2\">\n                            <input\n                                ref={inputRef}\n                                type=\"text\"\n                                value={inputValue}\n                                onChange={(e) => setInputValue(e.target.value)}\n                                onKeyDown={handleKeyDown}\n                                onFocus={() => !activeCommand && setIsOpen(true)}\n                                placeholder={\n                                    activeCommand\n                                        ? \"Type your message...\"\n                                        : \"Type / for commands...\"\n                                }\n                                className=\"flex-1 bg-transparent border-none outline-hidden text-md text-black dark:text-white placeholder:text-black/60 dark:placeholder:text-white/60\"\n                            />\n                            <button\n                                type=\"button\"\n                                onClick={handleButtonClick}\n                                className={cn(\n                                    \"p-1.5 rounded-md transition-colors shrink-0\",\n                                    inputValue || activeCommand\n                                        ? \"bg-sky-500/15 text-sky-500\"\n                                        : \"text-black/50 dark:text-white/50 hover:text-black/70 dark:hover:text-white/70\"\n                                )}\n                            >\n                                <SendHorizontal className=\"w-4 h-4\" />\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n                <AnimatePresence>\n                    {isOpen && !activeCommand && (\n                        <motion.div\n                            initial={{ opacity: 0, y: 8 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            exit={{ opacity: 0, y: 8 }}\n                            transition={{ duration: 0.15 }}\n                            className=\"absolute w-full mt-2 rounded-lg bg-black/5 dark:bg-white/5 shadow-lg overflow-hidden\"\n                        >\n                            <Command className=\"w-full\">\n                                <Command.List className=\"py-2\">\n                                    {COMMANDS.map((command) => (\n                                        <Command.Item\n                                            key={command.id}\n                                            onSelect={() =>\n                                                handleCommandSelect(command.id)\n                                            }\n                                            className=\"px-3 py-2.5 flex items-center gap-3 text-sm hover:bg-black/10 dark:hover:bg-white/10 cursor-pointer group\"\n                                        >\n                                            <command.icon className=\"w-4 h-4 text-black/50 dark:text-white/50 group-hover:text-black/70 dark:group-hover:text-white/70\" />\n                                            <div className=\"flex flex-col\">\n                                                <span className=\"font-medium text-black/70 dark:text-white/70\">\n                                                    {command.label}\n                                                </span>\n                                                <span className=\"text-xs text-black/50 dark:text-white/50\">\n                                                    {command.description}\n                                                </span>\n                                            </div>\n                                            <span className=\"ml-auto text-xs text-black/30 dark:text-white/30\">\n                                                {command.prefix}\n                                            </span>\n                                        </Command.Item>\n                                    ))}\n                                </Command.List>\n                            </Command>\n                        </motion.div>\n                    )}\n                </AnimatePresence>\n            </div>\n        </div>\n    );\n}\n",
      "path": "/components/ruixenui/ai-input/ai-input-16.tsx",
      "target": "/components/ruixenui/ai-input-16.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, type RefObject } from \"react\";\n\nexport function useClickOutside(\n    ref: RefObject<HTMLElement>,\n    handler: () => void\n) {\n    useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            if (ref.current && !ref.current.contains(event.target as Node)) {\n                handler();\n            }\n        };\n\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () =>\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n    }, [ref, handler]);\n}\n",
      "path": "/hooks/use-click-outside.ts",
      "target": "/hooks/use-click-outside.ts"
    }
  ]
}