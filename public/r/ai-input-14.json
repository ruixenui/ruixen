{
  "name": "ai-input-14",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { ArrowRight, Brain } from \"lucide-react\";\nimport { useRef, useState } from \"react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\n\ninterface ToggleButtonProps {\n    icon: React.ReactNode;\n    label: string;\n    isActive: boolean;\n    onClick: () => void;\n}\n\nfunction ToggleButton({ icon, label, isActive, onClick }: ToggleButtonProps) {\n    return (\n        <button\n            type=\"button\"\n            onClick={onClick}\n            className=\"flex items-center gap-2 text-sm text-black/60 dark:text-white/60 hover:text-black dark:hover:text-white transition-colors\"\n        >\n            <div\n                className={cn(\n                    \"w-4 h-4\",\n                    isActive\n                        ? \"text-blue-500 dark:text-blue-400\"\n                        : \"text-black/40 dark:text-white/40\"\n                )}\n            >\n                {icon}\n            </div>\n            <span>{label}</span>\n            <div\n                className={cn(\n                    \"relative inline-flex h-5 w-9 items-center rounded-full transition-colors\",\n                    isActive\n                        ? \"bg-blue-500 dark:bg-blue-400\"\n                        : \"bg-black/20 dark:bg-white/20\"\n                )}\n            >\n                <div\n                    className={cn(\n                        \"absolute h-4 w-4 transform rounded-full transition-transform shadow-xs bg-white\",\n                        isActive ? \"translate-x-4\" : \"translate-x-1\"\n                    )}\n                />\n            </div>\n        </button>\n    );\n}\n\nexport default function AIInput_14() {\n    const [value, setValue] = useState(\"\");\n    const [useMemory, setUseMemory] = useState(false);\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n        minHeight: 40,\n        maxHeight: 200,\n    });\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            setValue(\"\");\n            adjustHeight(true);\n        }\n    };\n\n    return (\n        <div className=\"w-full py-4\">\n            <div className=\"flex flex-col gap-4\">\n                <div className=\"bg-black/5 dark:bg-white/5 rounded-xl relative\">\n                    <div className=\"relative px-2 py-2\">\n                        <Textarea\n                            value={value}\n                            placeholder=\"Type your message...\"\n                            className={cn(\n                                \"w-full rounded-xl px-4 border-none resize-none bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 dark:text-white placeholder:text-black/70 dark:placeholder:text-white/70\",\n                                \"min-h-[40px]\"\n                            )}\n                            ref={textareaRef}\n                            onKeyDown={handleKeyDown}\n                            onChange={(e) => {\n                                setValue(e.target.value);\n                                adjustHeight();\n                            }}\n                        />\n                        <button\n                            type=\"button\"\n                            className=\"absolute right-3 top-1/2 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 p-1\"\n                        >\n                            <ArrowRight\n                                className={cn(\n                                    \"w-4 h-4 dark:text-white\",\n                                    value ? \"opacity-100\" : \"opacity-30\"\n                                )}\n                            />\n                        </button>\n                    </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                    <ToggleButton\n                        icon={<Brain className=\"w-4 h-4\" />}\n                        label=\"Memory\"\n                        isActive={useMemory}\n                        onClick={() => setUseMemory(!useMemory)}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n",
      "path": "/components/ruixenui/ai-input/ai-input-14.tsx",
      "target": "/components/ruixenui/ai-input-14.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, useRef, useCallback } from \"react\";\n\ninterface UseAutoResizeTextareaProps {\n    minHeight: number;\n    maxHeight?: number;\n}\n\nexport function useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n}: UseAutoResizeTextareaProps) {\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const adjustHeight = useCallback(\n        (reset?: boolean) => {\n            const textarea = textareaRef.current;\n            if (!textarea) return;\n\n            if (reset) {\n                textarea.style.height = `${minHeight}px`;\n                return;\n            }\n\n            // Temporarily shrink to get the right scrollHeight\n            textarea.style.height = `${minHeight}px`;\n\n            // Calculate new height\n            const newHeight = Math.max(\n                minHeight,\n                Math.min(\n                    textarea.scrollHeight,\n                    maxHeight ?? Number.POSITIVE_INFINITY\n                )\n            );\n\n            textarea.style.height = `${newHeight}px`;\n        },\n        [minHeight, maxHeight]\n    );\n\n    useEffect(() => {\n        // Set initial height\n        const textarea = textareaRef.current;\n        if (textarea) {\n            textarea.style.height = `${minHeight}px`;\n        }\n    }, [minHeight]);\n\n    // Adjust height on window resize\n    useEffect(() => {\n        const handleResize = () => adjustHeight();\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, [adjustHeight]);\n\n    return { textareaRef, adjustHeight };\n}\n",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}