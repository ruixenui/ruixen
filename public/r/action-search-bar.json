{
  "name": "action-search-bar",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "input"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport {\n    Search,\n    Send,\n    BarChart2,\n    Globe,\n    Video,\n    PlaneTakeoff,\n    AudioLines,\n    Layout,\n    LayoutGrid,\n} from \"lucide-react\";\nimport useDebounce from \"@/hooks/use-debounce\";\n\ninterface Action {\n    id: string;\n    label: string;\n    icon: React.ReactNode;\n    description?: string;\n    short?: string;\n    end?: string;\n}\n\ninterface SearchResult {\n    actions: Action[];\n}\n\nconst allActionsSample = [\n    {\n        id: \"1\",\n        label: \"Book tickets\",\n        icon: <PlaneTakeoff className=\"h-4 w-4 text-blue-500\" />,\n        description: \"Operator\",\n        short: \"⌘K\",\n        end: \"Agent\",\n    },\n    {\n        id: \"2\",\n        label: \"Summarize\",\n        icon: <BarChart2 className=\"h-4 w-4 text-orange-500\" />,\n        description: \"gpt-4o\",\n        short: \"⌘cmd+p\",\n        end: \"Command\",\n    },\n    {\n        id: \"3\",\n        label: \"Screen Studio\",\n        icon: <Video className=\"h-4 w-4 text-purple-500\" />,\n        description: \"gpt-4o\",\n        short: \"\",\n        end: \"Application\",\n    },\n    {\n        id: \"4\",\n        label: \"Talk to Jarvis\",\n        icon: <AudioLines className=\"h-4 w-4 text-green-500\" />,\n        description: \"gpt-4o voice\",\n        short: \"\",\n        end: \"Active\",\n    },\n    {\n        id: \"5\",\n        label: \"Ruixen UI - Pro\",\n        icon: <LayoutGrid className=\"h-4 w-4 text-blue-500\" />,\n        description: \"Components\",\n        short: \"\",\n        end: \"Link\",\n    },\n];\n\nfunction ActionSearchBar({\n    actions = allActionsSample,\n    defaultOpen = false,\n}: {\n    actions?: Action[];\n    defaultOpen?: boolean;\n}) {\n    const [query, setQuery] = useState(\"\");\n    const [result, setResult] = useState<SearchResult | null>(null);\n    const [isFocused, setIsFocused] = useState(defaultOpen);\n    const [isTyping, setIsTyping] = useState(false);\n    const [selectedAction, setSelectedAction] = useState<Action | null>(null);\n    const debouncedQuery = useDebounce(query, 200);\n\n    useEffect(() => {\n        if (!isFocused) {\n            setResult(null);\n            return;\n        }\n\n        if (!debouncedQuery) {\n            setResult({ actions: actions });\n            return;\n        }\n\n        const normalizedQuery = debouncedQuery.toLowerCase().trim();\n        const filteredActions = actions.filter((action) => {\n            const searchableText = action.label.toLowerCase();\n            return searchableText.includes(normalizedQuery);\n        });\n\n        setResult({ actions: filteredActions });\n    }, [debouncedQuery, isFocused, actions]);\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setQuery(e.target.value);\n        setIsTyping(true);\n    };\n\n    const container = {\n        hidden: { opacity: 0, height: 0 },\n        show: {\n            opacity: 1,\n            height: \"auto\",\n            transition: {\n                height: {\n                    duration: 0.4,\n                },\n                staggerChildren: 0.1,\n            },\n        },\n        exit: {\n            opacity: 0,\n            height: 0,\n            transition: {\n                height: {\n                    duration: 0.3,\n                },\n                opacity: {\n                    duration: 0.2,\n                },\n            },\n        },\n    };\n\n    const item = {\n        hidden: { opacity: 0, y: 20 },\n        show: {\n            opacity: 1,\n            y: 0,\n            transition: {\n                duration: 0.3,\n            },\n        },\n        exit: {\n            opacity: 0,\n            y: -10,\n            transition: {\n                duration: 0.2,\n            },\n        },\n    };\n\n    const handleFocus = () => {\n        setSelectedAction(null);\n        setIsFocused(true);\n    };\n\n    return (\n        <div className=\"w-full max-w-xl mx-auto\">\n            <div className=\"relative flex flex-col justify-start items-center min-h-[300px]\">\n                <div className=\"w-full max-w-sm sticky top-0 bg-background z-10 pt-4 pb-1\">\n                    <label\n                        className=\"text-xs font-medium text-gray-500 dark:text-gray-400 mb-1 block\"\n                        htmlFor=\"search\"\n                    >\n                        Search Commands\n                    </label>\n                    <div className=\"relative\">\n                        <Input\n                            type=\"text\"\n                            placeholder=\"What's up?\"\n                            value={query}\n                            onChange={handleInputChange}\n                            onFocus={handleFocus}\n                            onBlur={() =>\n                                setTimeout(() => setIsFocused(false), 200)\n                            }\n                            className=\"pl-3 pr-9 py-1.5 h-9 text-sm rounded-lg focus-visible:ring-offset-0\"\n                        />\n                        <div className=\"absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4\">\n                            <AnimatePresence mode=\"popLayout\">\n                                {query.length > 0 ? (\n                                    <motion.div\n                                        key=\"send\"\n                                        initial={{ y: -20, opacity: 0 }}\n                                        animate={{ y: 0, opacity: 1 }}\n                                        exit={{ y: 20, opacity: 0 }}\n                                        transition={{ duration: 0.2 }}\n                                    >\n                                        <Send className=\"w-4 h-4 text-gray-400 dark:text-gray-500\" />\n                                    </motion.div>\n                                ) : (\n                                    <motion.div\n                                        key=\"search\"\n                                        initial={{ y: -20, opacity: 0 }}\n                                        animate={{ y: 0, opacity: 1 }}\n                                        exit={{ y: 20, opacity: 0 }}\n                                        transition={{ duration: 0.2 }}\n                                    >\n                                        <Search className=\"w-4 h-4 text-gray-400 dark:text-gray-500\" />\n                                    </motion.div>\n                                )}\n                            </AnimatePresence>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"w-full max-w-sm\">\n                    <AnimatePresence>\n                        {isFocused && result && !selectedAction && (\n                            <motion.div\n                                className=\"w-full border rounded-md shadow-xs overflow-hidden dark:border-gray-800 bg-white dark:bg-black mt-1\"\n                                variants={container}\n                                initial=\"hidden\"\n                                animate=\"show\"\n                                exit=\"exit\"\n                            >\n                                <motion.ul>\n                                    {result.actions.map((action) => (\n                                        <motion.li\n                                            key={action.id}\n                                            className=\"px-3 py-2 flex items-center justify-between hover:bg-gray-200 dark:hover:bg-zinc-900  cursor-pointer rounded-md\"\n                                            variants={item}\n                                            layout\n                                            onClick={() =>\n                                                setSelectedAction(action)\n                                            }\n                                        >\n                                            <div className=\"flex items-center gap-2 justify-between\">\n                                                <div className=\"flex items-center gap-2\">\n                                                    <span className=\"text-gray-500\">\n                                                        {action.icon}\n                                                    </span>\n                                                    <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                                                        {action.label}\n                                                    </span>\n                                                    <span className=\"text-xs text-gray-400\">\n                                                        {action.description}\n                                                    </span>\n                                                </div>\n                                            </div>\n                                            <div className=\"flex items-center gap-2\">\n                                                <span className=\"text-xs text-gray-400\">\n                                                    {action.short}\n                                                </span>\n                                                <span className=\"text-xs text-gray-400 text-right\">\n                                                    {action.end}\n                                                </span>\n                                            </div>\n                                        </motion.li>\n                                    ))}\n                                </motion.ul>\n                                <div className=\"mt-2 px-3 py-2 border-t border-gray-100 dark:border-gray-800\">\n                                    <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                                        <span>Press ⌘K to open commands</span>\n                                        <span>ESC to cancel</span>\n                                    </div>\n                                </div>\n                            </motion.div>\n                        )}\n                    </AnimatePresence>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ActionSearchBar;\n",
      "path": "/components/ruixenui/action-search-bar.tsx",
      "target": "/components/ruixenui/action-search-bar.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, useState } from \"react\";\n\nfunction useDebounce<T>(value: T, delay: number = 500): T {\n    const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n\n        return () => {\n            clearTimeout(timer);\n        };\n    }, [value, delay]);\n\n    return debouncedValue;\n}\n\nexport default useDebounce;\n",
      "path": "/hooks/use-debounce.ts",
      "target": "/hooks/use-debounce.ts"
    }
  ]
}