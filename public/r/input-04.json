{
  "name": "input-04",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface NumericInputProps {\n    min?: number;\n    max?: number;\n    step?: number;\n    defaultValue?: number;\n}\n\nexport default function Input_04({\n    min = 0,\n    max = 100,\n    step = 1,\n    defaultValue = 50,\n}: NumericInputProps) {\n    const [value, setValue] = useState(defaultValue);\n    const [isFocused, setIsFocused] = useState(false);\n\n    const percentage = ((value - min) / (max - min)) * 100;\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const newValue = Number.parseFloat(e.target.value);\n        if (!Number.isNaN(newValue) && newValue >= min && newValue <= max) {\n            setValue(newValue);\n        }\n    };\n\n    const incrementValue = () => {\n        const newValue = Math.min(value + step, max);\n        setValue(newValue);\n    };\n\n    const decrementValue = () => {\n        const newValue = Math.max(value - step, min);\n        setValue(newValue);\n    };\n\n    return (\n        <div className=\"w-full max-w-xs\">\n            <div className=\"relative\">\n                <div\n                    className={cn(\n                        \"flex items-center rounded-lg border\",\n                        \"border-zinc-200 dark:border-zinc-800\",\n                        \"bg-white dark:bg-black/5\",\n                        isFocused && \"ring-2 ring-zinc-300 dark:ring-zinc-700\"\n                    )}\n                >\n                    <button\n                        type=\"button\"\n                        onClick={decrementValue}\n                        className=\"px-3 py-2 hover:bg-zinc-100 \n                        dark:hover:bg-zinc-800\n                        text-zinc-500 dark:text-zinc-400 transition-colors\"\n                        aria-label=\"Decrement button\"\n                    >\n                        -\n                    </button>\n                    <input\n                        type=\"number\"\n                        value={value}\n                        onChange={handleChange}\n                        onFocus={() => setIsFocused(true)}\n                        onBlur={() => setIsFocused(false)}\n                        min={min}\n                        max={max}\n                        step={step}\n                        className=\"w-full text-center border-none bg-transparent focus:outline-hidden \n                        [-moz-appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none \n                        [&::-webkit-inner-spin-button]:appearance-none\n                        text-zinc-900 dark:text-zinc-100\"\n                    />\n                    <button\n                        type=\"button\"\n                        onClick={incrementValue}\n                        className=\"px-3 py-2 hover:bg-zinc-100 \n                        dark:hover:bg-zinc-800\n                        text-zinc-500 dark:text-zinc-400 transition-colors\"\n                        aria-label=\"Increment button\"\n                    >\n                        +\n                    </button>\n                </div>\n\n                <div className=\"mt-2 h-1.5 rounded-full bg-zinc-100 dark:bg-zinc-800 overflow-hidden\">\n                    <div\n                        className=\"h-full bg-zinc-300 dark:bg-zinc-600 transition-all duration-200\"\n                        style={{ width: `${percentage}%` }}\n                    />\n                </div>\n\n                <div className=\"mt-1 flex justify-between text-xs text-zinc-400 dark:text-zinc-500\">\n                    <span>{min}</span>\n                    <span>{max}</span>\n                </div>\n            </div>\n        </div>\n    );\n}\n",
      "path": "/components/ruixenui/input/input-04.tsx",
      "target": "/components/ruixenui/input-04.tsx"
    }
  ]
}