{
  "name": "ai-input-15",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport {\n    ArrowRight,\n    Brain,\n    type LucideIcon,\n    Mic,\n    Paperclip,\n    TriangleAlert,\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\n\ninterface ToolbarButton {\n    icon: LucideIcon;\n    onClick?: () => void;\n    className: string | ((isRecording: boolean) => string);\n    isFileInput?: boolean;\n    isRecording?: boolean;\n}\n\nexport default function AIInput_15() {\n    const [value, setValue] = useState(\"\");\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n        minHeight: 96,\n        maxHeight: 300,\n    });\n    const [useMemory, setUseMemory] = useState(false);\n    const [isRecording, setIsRecording] = useState(false);\n\n    const AI_MODELS = [\"GPT-4\", \"Claude\", \"Gemini\"];\n\n    const TOOLBAR_BUTTONS: ToolbarButton[] = [\n        {\n            icon: Mic,\n            onClick: () => setIsRecording(!isRecording),\n            className: (isRecording: boolean) =>\n                cn(\n                    \"rounded-lg p-2 transition-all\",\n                    isRecording\n                        ? \"bg-red-500 text-white\"\n                        : \"bg-black/5 dark:bg-white/5 text-black/40 dark:text-white/40 hover:text-black dark:hover:text-white\"\n                ),\n            isRecording,\n        },\n        {\n            icon: Paperclip,\n            isFileInput: true,\n            className: \"rounded-lg p-2 bg-black/5 dark:bg-white/5\",\n        },\n    ];\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            setValue(\"\");\n            adjustHeight(true);\n        }\n    };\n\n    return (\n        <div className=\"w-full py-4\">\n            <div className=\"bg-black/5 dark:bg-white/5 rounded-2xl p-6\">\n                <div className=\"flex items-center justify-between mb-4 pb-4 border-b border-black/10 dark:border-white/10\">\n                    <div className=\"flex items-center gap-3\">\n                        <select className=\"text-xs bg-black/5 dark:bg-white/5 border border-black/10 dark:border-white/10 rounded-md px-2 py-1 dark:text-white\">\n                            {AI_MODELS.map((model) => (\n                                <option key={model}>{model}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <button\n                        type=\"button\"\n                        onClick={() => setUseMemory(!useMemory)}\n                        className=\"flex items-center gap-2 text-sm text-black/60 dark:text-white/60 hover:text-black dark:hover:text-white transition-colors\"\n                    >\n                        <Brain\n                            className={cn(\n                                \"w-4 h-4\",\n                                useMemory\n                                    ? \"text-blue-500 dark:text-blue-400\"\n                                    : \"text-black/40 dark:text-white/40\"\n                            )}\n                        />\n                        <span>Memory</span>\n                        <div\n                            className={cn(\n                                \"relative inline-flex h-5 w-9 items-center rounded-full transition-colors\",\n                                useMemory\n                                    ? \"bg-blue-500 dark:bg-blue-400\"\n                                    : \"bg-black/20 dark:bg-white/20\"\n                            )}\n                        >\n                            <div\n                                className={cn(\n                                    \"absolute h-4 w-4 transform rounded-full bg-white transition-transform shadow-xs\",\n                                    useMemory\n                                        ? \"translate-x-4\"\n                                        : \"translate-x-1\"\n                                )}\n                            />\n                        </div>\n                    </button>\n                </div>\n\n                <div className=\"relative\">\n                    <div className=\"relative flex flex-col\">\n                        <div\n                            className=\"overflow-y-auto\"\n                            style={{ maxHeight: \"400px\" }}\n                        >\n                            <Textarea\n                                id=\"ai-input-15\"\n                                value={value}\n                                placeholder={\n                                    isRecording\n                                        ? \"Listening...\"\n                                        : \"What would you like to know?\"\n                                }\n                                className={cn(\n                                    \"w-full rounded-xl rounded-b-none px-4 py-3 bg-black/5 dark:bg-white/5 border-none dark:text-white placeholder:text-black/70 dark:placeholder:text-white/70 resize-none focus-visible:ring-0 focus-visible:ring-offset-0\",\n                                    \"min-h-[96px]\"\n                                )}\n                                ref={textareaRef}\n                                onKeyDown={handleKeyDown}\n                                onChange={(e) => {\n                                    setValue(e.target.value);\n                                    adjustHeight();\n                                }}\n                            />\n                        </div>\n\n                        {/* Fixed toolbar area */}\n                        <div className=\"h-14 bg-black/5 dark:bg-white/5 rounded-b-xl\">\n                            <div className=\"absolute left-3 right-3 bottom-3 flex items-center justify-between\">\n                                <div className=\"flex items-center gap-2\">\n                                    {TOOLBAR_BUTTONS.map((button, index) =>\n                                        button.isFileInput ? (\n                                            <label\n                                                key={index}\n                                                className={\n                                                    typeof button.className ===\n                                                    \"string\"\n                                                        ? button.className\n                                                        : button.className(\n                                                              isRecording\n                                                          )\n                                                }\n                                            >\n                                                <input\n                                                    type=\"file\"\n                                                    className=\"hidden\"\n                                                />\n                                                <button.icon className=\"w-4 h-4 text-black/40 dark:text-white/40 hover:text-black dark:hover:text-white transition-colors\" />\n                                            </label>\n                                        ) : (\n                                            <button\n                                                key={index}\n                                                type=\"button\"\n                                                onClick={button.onClick}\n                                                className={\n                                                    typeof button.className ===\n                                                    \"string\"\n                                                        ? button.className\n                                                        : button.className(\n                                                              isRecording\n                                                          )\n                                                }\n                                            >\n                                                <button.icon className=\"w-4 h-4\" />\n                                            </button>\n                                        )\n                                    )}\n                                </div>\n                                <button\n                                    type=\"button\"\n                                    className=\"rounded-lg p-2 bg-black/5 dark:bg-white/5\"\n                                >\n                                    <ArrowRight\n                                        className={cn(\n                                            \"w-4 h-4 dark:text-white\",\n                                            value ? \"opacity-100\" : \"opacity-30\"\n                                        )}\n                                    />\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"mt-3 flex items-center gap-2 text-xs text-black/50 dark:text-white/50 justify-center\">\n                    <div className=\"flex items-center gap-1\">\n                        <TriangleAlert className=\"w-3 h-3\" />\n                        <span>AI can make mistakes, use with caution.</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n",
      "path": "/components/ruixenui/ai-input/ai-input-15.tsx",
      "target": "/components/ruixenui/ai-input-15.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, useRef, useCallback } from \"react\";\n\ninterface UseAutoResizeTextareaProps {\n    minHeight: number;\n    maxHeight?: number;\n}\n\nexport function useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n}: UseAutoResizeTextareaProps) {\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const adjustHeight = useCallback(\n        (reset?: boolean) => {\n            const textarea = textareaRef.current;\n            if (!textarea) return;\n\n            if (reset) {\n                textarea.style.height = `${minHeight}px`;\n                return;\n            }\n\n            // Temporarily shrink to get the right scrollHeight\n            textarea.style.height = `${minHeight}px`;\n\n            // Calculate new height\n            const newHeight = Math.max(\n                minHeight,\n                Math.min(\n                    textarea.scrollHeight,\n                    maxHeight ?? Number.POSITIVE_INFINITY\n                )\n            );\n\n            textarea.style.height = `${newHeight}px`;\n        },\n        [minHeight, maxHeight]\n    );\n\n    useEffect(() => {\n        // Set initial height\n        const textarea = textareaRef.current;\n        if (textarea) {\n            textarea.style.height = `${minHeight}px`;\n        }\n    }, [minHeight]);\n\n    // Adjust height on window resize\n    useEffect(() => {\n        const handleResize = () => adjustHeight();\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, [adjustHeight]);\n\n    return { textareaRef, adjustHeight };\n}\n",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}