{
  "name": "input-06",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState, useRef, useEffect, useCallback } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nconst OTP_LENGTH = 6;\n\nexport default function Input_06() {\n    const [code, setCode] = useState<string[]>(Array(OTP_LENGTH).fill(\"\"));\n    const [activeIndex, setActiveIndex] = useState(0);\n    const inputRefs = useRef<(HTMLInputElement | null)[]>([]);\n    const [shake, setShake] = useState(false);\n\n    useEffect(() => {\n        inputRefs.current = inputRefs.current.slice(0, OTP_LENGTH);\n    }, []);\n\n    const handleChange = (index: number, value: string) => {\n        if (!/^\\d*$/.test(value)) return;\n\n        const newCode = [...code];\n        newCode[index] = value.slice(-1);\n        setCode(newCode);\n\n        if (value && index < OTP_LENGTH - 1) {\n            inputRefs.current[index + 1]?.focus();\n            setActiveIndex(index + 1);\n        }\n    };\n\n    const handleKeyDown = (\n        index: number,\n        e: React.KeyboardEvent<HTMLInputElement>\n    ) => {\n        if (e.key === \"Backspace\" && !code[index] && index > 0) {\n            // Move to previous input on backspace if current input is empty\n            inputRefs.current[index - 1]?.focus();\n            setActiveIndex(index - 1);\n        } else if (e.key === \"ArrowLeft\" && index > 0) {\n            inputRefs.current[index - 1]?.focus();\n            setActiveIndex(index - 1);\n        } else if (e.key === \"ArrowRight\" && index < OTP_LENGTH - 1) {\n            inputRefs.current[index + 1]?.focus();\n            setActiveIndex(index + 1);\n        }\n    };\n\n    const handlePaste = (e: React.ClipboardEvent) => {\n        e.preventDefault();\n        const pastedData = e.clipboardData\n            .getData(\"text/plain\")\n            .slice(0, OTP_LENGTH);\n\n        if (!/^\\d+$/.test(pastedData)) {\n            setShake(true);\n            setTimeout(() => setShake(false), 600);\n            return;\n        }\n\n        const newCode = [...code];\n        pastedData.split(\"\").forEach((digit, index) => {\n            newCode[index] = digit;\n        });\n        setCode(newCode);\n\n        const focusIndex = Math.min(pastedData.length, OTP_LENGTH - 1);\n        inputRefs.current[focusIndex]?.focus();\n        setActiveIndex(focusIndex);\n    };\n\n    const setInputRef = useCallback(\n        (index: number) => (el: HTMLInputElement | null) => {\n            inputRefs.current[index] = el;\n        },\n        []\n    );\n\n    return (\n        <div className=\"w-full max-w-sm space-y-2\">\n            <fieldset\n                className={cn(\"flex flex-col gap-2\", shake && \"animate-shake\")}\n            >\n                <legend className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300 mb-2\">\n                    Verification Code\n                </legend>\n\n                <div className=\"flex gap-2 items-center justify-start\">\n                    {Array.from({ length: OTP_LENGTH }).map((_, index) => (\n                        <div key={`otp-input-${index}`} className=\"relative\">\n                            <input\n                                id={`otp-input-${index}`}\n                                ref={setInputRef(index)}\n                                type=\"text\"\n                                inputMode=\"numeric\"\n                                maxLength={1}\n                                value={code[index]}\n                                onChange={(e) =>\n                                    handleChange(index, e.target.value)\n                                }\n                                onKeyDown={(e) => handleKeyDown(index, e)}\n                                onPaste={handlePaste}\n                                onFocus={() => setActiveIndex(index)}\n                                className={cn(\n                                    \"w-12 h-14 text-center text-lg font-semibold\",\n                                    \"rounded-lg border\",\n                                    \"transition-all duration-200\",\n                                    \"bg-white dark:bg-zinc-900\",\n                                    \"border-zinc-200 dark:border-zinc-800\",\n                                    activeIndex === index &&\n                                        \"border-indigo-500 dark:border-indigo-500\",\n                                    \"focus:outline-hidden focus:ring-2\",\n                                    \"focus:ring-indigo-500/20\"\n                                )}\n                            />\n                            {index !== 6 - 1 && (\n                                <div className=\"absolute top-1/2 -right-2 w-2 transform -translate-y-1/2\">\n                                    <div className=\"w-1 h-1 rounded-full bg-zinc-300 dark:bg-zinc-600\" />\n                                </div>\n                            )}\n                        </div>\n                    ))}\n                </div>\n            </fieldset>\n        </div>\n    );\n}\n",
      "path": "/components/ruixenui/input/input-06.tsx",
      "target": "/components/ruixenui/input-06.tsx"
    }
  ]
}